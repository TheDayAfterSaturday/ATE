{\rtf1\ansi \deff4\deflang1033
{\fonttbl{\f0\fswiss\fcharset0\fprq2 Arial;}{\f1\fmodern\fcharset0\fprq2 Courier New;}{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f14\fmodern\fcharset128\fprq1 \'82l\'82r \'83S\'83V\'83b\'83N;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;}
#{\footnote WinHelp_Contents}
${\footnote Contents}
K{\footnote Contents}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b Contents
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\keep\par 
{\cf2\uldb Introduction}{\v %WinHelp_Introduction}\par\cf0 
{\cf2\uldb Assumptions}{\v %WinHelp_Assumptions}\par\cf0 
{\cf2\uldb Error Codes}{\v %WinHelp_ErrorCodes}\par\cf0 
{\cf2\uldb CPX400DP Summary}{\v %WinHelp_Summary}\par\cf0 
Function Tree Layout:\par 
   Class/Panel Name:                        
Function Name:\par 
      {\cf2\uldb Initialize}{\v %WinHelp_CPX400_init}\cf0
                            {\cf2\uldb CPX400_init}{\v %WinHelp_CPX400_init}\par\cf0 
      {\cf2\uldb Initialize With Options}{\v %WinHelp_CPX400_InitWithOptions}\cf0
               {\cf2\uldb CPX400_InitWithOptions}{\v %WinHelp_CPX400_InitWithOptions}\par\cf0 
      Configuration Functions\par 
         Output\par 
            {\cf2\uldb Configure Output Range}{\v %WinHelp_CPX400_ConfigureOutputRange}\cf0
          {\cf2\uldb CPX400_ConfigureOutputRange}{\v %WinHelp_CPX400_ConfigureOutputRange}\par\cf0 
            {\cf2\uldb Configure Output Enabled}{\v %WinHelp_CPX400_ConfigureOutputEnabled}\cf0
        {\cf2\uldb CPX400_ConfigureOutputEnabled}{\v %WinHelp_CPX400_ConfigureOutputEnabled}\par\cf0 
            {\cf2\uldb Configure Current Limit}{\v %WinHelp_CPX400_ConfigureCurrentLimit}\cf0
         {\cf2\uldb CPX400_ConfigureCurrentLimit}{\v %WinHelp_CPX400_ConfigureCurrentLimit}\par\cf0 
            {\cf2\uldb Configure OVP}{\v %WinHelp_CPX400_ConfigureOVP}\cf0
                   {\cf2\uldb CPX400_ConfigureOVP}{\v %WinHelp_CPX400_ConfigureOVP}\par\cf0 
            {\cf2\uldb Configure OCP}{\v %WinHelp_CPX400_ConfigureOCP}\cf0
                   {\cf2\uldb CPX400_ConfigureOCP}{\v %WinHelp_CPX400_ConfigureOCP}\par\cf0 
            {\cf2\uldb Configure Voltage Level}{\v %WinHelp_CPX400_ConfigureVoltageLevel}\cf0
         {\cf2\uldb CPX400_ConfigureVoltageLevel}{\v %WinHelp_CPX400_ConfigureVoltageLevel}\par\cf0 
            {\cf2\uldb Increment Voltage Level}{\v %WinHelp_CPX400_IncrementVoltageLevel}\cf0
         {\cf2\uldb CPX400_IncrementVoltageLevel}{\v %WinHelp_CPX400_IncrementVoltageLevel}\par\cf0 
            {\cf2\uldb Decrement Voltage Level}{\v %WinHelp_CPX400_DecrementVoltageLevel}\cf0
         {\cf2\uldb CPX400_DecrementVoltageLevel}{\v %WinHelp_CPX400_DecrementVoltageLevel}\par\cf0 
            {\cf2\uldb Increment Current Level}{\v %WinHelp_CPX400_IncrementCurrentLevel}\cf0
         {\cf2\uldb CPX400_IncrementCurrentLevel}{\v %WinHelp_CPX400_IncrementCurrentLevel}\par\cf0 
            {\cf2\uldb Decrement Current Level}{\v %WinHelp_CPX400_DecrementCurrentLevel}\cf0
         {\cf2\uldb CPX400_DecrementCurrentLevel}{\v %WinHelp_CPX400_DecrementCurrentLevel}\par\cf0 
         Set/Get/Check Attribute\par 
            Set Attribute\par 
               {\cf2\uldb Set Attribute ViInt32}{\v %WinHelp_CPX400_SetAttributeViInt32}\cf0
        {\cf2\uldb CPX400_SetAttributeViInt32}{\v %WinHelp_CPX400_SetAttributeViInt32}\par\cf0 
               {\cf2\uldb Set Attribute ViReal64}{\v %WinHelp_CPX400_SetAttributeViReal64}\cf0
       {\cf2\uldb CPX400_SetAttributeViReal64}{\v %WinHelp_CPX400_SetAttributeViReal64}\par\cf0 
               {\cf2\uldb Set Attribute ViString}{\v %WinHelp_CPX400_SetAttributeViString}\cf0
       {\cf2\uldb CPX400_SetAttributeViString}{\v %WinHelp_CPX400_SetAttributeViString}\par\cf0 
               {\cf2\uldb Set Attribute ViBoolean}{\v %WinHelp_CPX400_SetAttributeViBoolean}\cf0
      {\cf2\uldb CPX400_SetAttributeViBoolean}{\v %WinHelp_CPX400_SetAttributeViBoolean}\par\cf0 
               {\cf2\uldb Set Attribute ViSession}{\v %WinHelp_CPX400_SetAttributeViSession}\cf0
      {\cf2\uldb CPX400_SetAttributeViSession}{\v %WinHelp_CPX400_SetAttributeViSession}\par\cf0 
            Get Attribute\par 
               {\cf2\uldb Get Attribute ViInt32}{\v %WinHelp_CPX400_GetAttributeViInt32}\cf0
        {\cf2\uldb CPX400_GetAttributeViInt32}{\v %WinHelp_CPX400_GetAttributeViInt32}\par\cf0 
               {\cf2\uldb Get Attribute ViReal64}{\v %WinHelp_CPX400_GetAttributeViReal64}\cf0
       {\cf2\uldb CPX400_GetAttributeViReal64}{\v %WinHelp_CPX400_GetAttributeViReal64}\par\cf0 
               {\cf2\uldb Get Attribute ViString}{\v %WinHelp_CPX400_GetAttributeViString}\cf0
       {\cf2\uldb CPX400_GetAttributeViString}{\v %WinHelp_CPX400_GetAttributeViString}\par\cf0 
               {\cf2\uldb Get Attribute ViBoolean}{\v %WinHelp_CPX400_GetAttributeViBoolean}\cf0
      {\cf2\uldb CPX400_GetAttributeViBoolean}{\v %WinHelp_CPX400_GetAttributeViBoolean}\par\cf0 
               {\cf2\uldb Get Attribute ViSession}{\v %WinHelp_CPX400_GetAttributeViSession}\cf0
      {\cf2\uldb CPX400_GetAttributeViSession}{\v %WinHelp_CPX400_GetAttributeViSession}\par\cf0 
            Check Attribute\par 
               {\cf2\uldb Check Attribute ViInt32}{\v %WinHelp_CPX400_CheckAttributeViInt32}\cf0
      {\cf2\uldb CPX400_CheckAttributeViInt32}{\v %WinHelp_CPX400_CheckAttributeViInt32}\par\cf0 
               {\cf2\uldb Check Attribute ViReal64}{\v %WinHelp_CPX400_CheckAttributeViReal64}\cf0
     {\cf2\uldb CPX400_CheckAttributeViReal64}{\v %WinHelp_CPX400_CheckAttributeViReal64}\par\cf0 
               {\cf2\uldb Check Attribute ViString}{\v %WinHelp_CPX400_CheckAttributeViString}\cf0
     {\cf2\uldb CPX400_CheckAttributeViString}{\v %WinHelp_CPX400_CheckAttributeViString}\par\cf0 
               {\cf2\uldb Check Attribute ViBoolean}{\v %WinHelp_CPX400_CheckAttributeViBoolean}\cf0
    {\cf2\uldb CPX400_CheckAttributeViBoolean}{\v %WinHelp_CPX400_CheckAttributeViBoolean}\par\cf0 
               {\cf2\uldb Check Attribute ViSession}{\v %WinHelp_CPX400_CheckAttributeViSession}\cf0
    {\cf2\uldb CPX400_CheckAttributeViSession}{\v %WinHelp_CPX400_CheckAttributeViSession}\par\cf0 
      Measure Output\par 
         {\cf2\uldb Measure}{\v %WinHelp_CPX400_Measure}\cf0
                            {\cf2\uldb CPX400_Measure}{\v %WinHelp_CPX400_Measure}\par\cf0 
      Action/Status Functions\par 
         {\cf2\uldb Query Output State}{\v %WinHelp_CPX400_QueryOutputState}\cf0
                 {\cf2\uldb CPX400_QueryOutputState}{\v %WinHelp_CPX400_QueryOutputState}\par\cf0 
         {\cf2\uldb Query Max Current Limit}{\v %WinHelp_CPX400_QueryMaxCurrentLimit}\cf0
            {\cf2\uldb CPX400_QueryMaxCurrentLimit}{\v %WinHelp_CPX400_QueryMaxCurrentLimit}\par\cf0 
         {\cf2\uldb Query Max Voltage Level}{\v %WinHelp_CPX400_QueryMaxVoltageLevel}\cf0
            {\cf2\uldb CPX400_QueryMaxVoltageLevel}{\v %WinHelp_CPX400_QueryMaxVoltageLevel}\par\cf0 
         {\cf2\uldb Reset Output Protection}{\v %WinHelp_CPX400_ResetOutputProtection}\cf0
            {\cf2\uldb CPX400_ResetOutputProtection}{\v %WinHelp_CPX400_ResetOutputProtection}\par\cf0 
         {\cf2\uldb Wait for operation complete}{\v %WinHelp_CPX400_WaitForOperationComplete}\cf0
        {\cf2\uldb CPX400_WaitForOperationComplete}{\v %WinHelp_CPX400_WaitForOperationComplete}\par\cf0 
         {\cf2\uldb Clear Status}{\v %WinHelp_CPX400_ClearStatus}\cf0
                       {\cf2\uldb CPX400_ClearStatus}{\v %WinHelp_CPX400_ClearStatus}\par\cf0 
      Utility Functions\par 
         {\cf2\uldb Reset}{\v %WinHelp_CPX400_reset}\cf0
                              {\cf2\uldb CPX400_reset}{\v %WinHelp_CPX400_reset}\par\cf0 
         {\cf2\uldb Save Setup}{\v %WinHelp_CPX400_SaveSetup}\cf0
                         {\cf2\uldb CPX400_SaveSetup}{\v %WinHelp_CPX400_SaveSetup}\par\cf0 
         {\cf2\uldb Recall Setup}{\v %WinHelp_CPX400_RecallSetup}\cf0
                       {\cf2\uldb CPX400_RecallSetup}{\v %WinHelp_CPX400_RecallSetup}\par\cf0 
         {\cf2\uldb Reset With Defaults}{\v %WinHelp_CPX400_ResetWithDefaults}\cf0
                {\cf2\uldb CPX400_ResetWithDefaults}{\v %WinHelp_CPX400_ResetWithDefaults}\par\cf0 
         {\cf2\uldb Disable}{\v %WinHelp_CPX400_Disable}\cf0
                            {\cf2\uldb CPX400_Disable}{\v %WinHelp_CPX400_Disable}\par\cf0 
         {\cf2\uldb Invalidate All Attributes}{\v %WinHelp_CPX400_InvalidateAllAttributes}\cf0
          {\cf2\uldb CPX400_InvalidateAllAttributes}{\v %WinHelp_CPX400_InvalidateAllAttributes}\par\cf0 
         {\cf2\uldb Local}{\v %WinHelp_CPX400_Local}\cf0
                              {\cf2\uldb CPX400_Local}{\v %WinHelp_CPX400_Local}\par\cf0 
         {\cf2\uldb Self-Test}{\v %WinHelp_CPX400_self_test}\cf0
                          {\cf2\uldb CPX400_self_test}{\v %WinHelp_CPX400_self_test}\par\cf0 
         {\cf2\uldb Get Channel Name}{\v %WinHelp_CPX400_GetChannelName}\cf0
                   {\cf2\uldb CPX400_GetChannelName}{\v %WinHelp_CPX400_GetChannelName}\par\cf0 
         {\cf2\uldb Revision Query}{\v %WinHelp_CPX400_revision_query}\cf0
                     {\cf2\uldb CPX400_revision_query}{\v %WinHelp_CPX400_revision_query}\par\cf0 
         {\cf2\uldb Execution Error-Query}{\v %WinHelp_CPX400_execution_error_query}\cf0
              {\cf2\uldb CPX400_execution_error_query}{\v %WinHelp_CPX400_execution_error_query}\par\cf0 
         {\cf2\uldb Error-Query}{\v %WinHelp_CPX400_error_query}\cf0
                        {\cf2\uldb CPX400_error_query}{\v %WinHelp_CPX400_error_query}\par\cf0 
         {\cf2\uldb Error Message}{\v %WinHelp_CPX400_error_message}\cf0
                      {\cf2\uldb CPX400_error_message}{\v %WinHelp_CPX400_error_message}\par\cf0 
         Interchangeability Info\par 
            {\cf2\uldb Get Next Interchange Warning}{\v %WinHelp_CPX400_GetNextInterchangeWarning}\cf0
    {\cf2\uldb CPX400_GetNextInterchangeWarning}{\v %WinHelp_CPX400_GetNextInterchangeWarning}\par\cf0 
            {\cf2\uldb Clear Interchange Warnings}{\v %WinHelp_CPX400_ClearInterchangeWarnings}\cf0
      {\cf2\uldb CPX400_ClearInterchangeWarnings}{\v %WinHelp_CPX400_ClearInterchangeWarnings}\par\cf0 
            {\cf2\uldb Reset Interchange Check}{\v %WinHelp_CPX400_ResetInterchangeCheck}\cf0
         {\cf2\uldb CPX400_ResetInterchangeCheck}{\v %WinHelp_CPX400_ResetInterchangeCheck}\par\cf0 
         Error Info\par 
            {\cf2\uldb Get Error Info}{\v %WinHelp_CPX400_GetErrorInfo}\cf0
                  {\cf2\uldb CPX400_GetErrorInfo}{\v %WinHelp_CPX400_GetErrorInfo}\par\cf0 
            {\cf2\uldb Clear Error Info}{\v %WinHelp_CPX400_ClearErrorInfo}\cf0
                {\cf2\uldb CPX400_ClearErrorInfo}{\v %WinHelp_CPX400_ClearErrorInfo}\par\cf0 
            {\cf2\uldb Get Error}{\v %WinHelp_CPX400_GetError}\cf0
                       {\cf2\uldb CPX400_GetError}{\v %WinHelp_CPX400_GetError}\par\cf0 
            {\cf2\uldb Clear Error}{\v %WinHelp_CPX400_ClearError}\cf0
                     {\cf2\uldb CPX400_ClearError}{\v %WinHelp_CPX400_ClearError}\par\cf0 
         Coercion Info\par 
            {\cf2\uldb Get Next Coercion Record}{\v %WinHelp_CPX400_GetNextCoercionRecord}\cf0
        {\cf2\uldb CPX400_GetNextCoercionRecord}{\v %WinHelp_CPX400_GetNextCoercionRecord}\par\cf0 
         Locking\par 
            {\cf2\uldb Lock Session}{\v %WinHelp_CPX400_LockSession}\cf0
                    {\cf2\uldb CPX400_LockSession}{\v %WinHelp_CPX400_LockSession}\par\cf0 
            {\cf2\uldb Unlock Session}{\v %WinHelp_CPX400_UnlockSession}\cf0
                  {\cf2\uldb CPX400_UnlockSession}{\v %WinHelp_CPX400_UnlockSession}\par\cf0 
         Instrument I/O\par 
            {\cf2\uldb Write Instrument Data}{\v %WinHelp_CPX400_WriteInstrData}\cf0
           {\cf2\uldb CPX400_WriteInstrData}{\v %WinHelp_CPX400_WriteInstrData}\par\cf0 
            {\cf2\uldb Read Instrument Data}{\v %WinHelp_CPX400_ReadInstrData}\cf0
            {\cf2\uldb CPX400_ReadInstrData}{\v %WinHelp_CPX400_ReadInstrData}\par\cf0 
      {\cf2\uldb Close}{\v %WinHelp_CPX400_close}\cf0
                                 {\cf2\uldb CPX400_close}{\v %WinHelp_CPX400_close}\par\cf0 
}\page
#{\footnote WinHelp_Introduction}
${\footnote Introduction}
K{\footnote Introduction}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b Introduction
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\keep\par
  This instrument driver provides programming support for CPX400DP.\par
  It contains functions for opening, configuring, taking measurements from, and\par
  closing the instrument.\par
\par
\par
}\page
#{\footnote WinHelp_Assumptions}
${\footnote Assumptions}
K{\footnote Assumptions}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b Assumptions
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\keep\par
  To successfully use this module, the following conditions must be met:\par
\par
  For GPIB instrument drivers:\par
         -  the instrument is connected to the GPIB.\par
         -  the GPIB address supplied to the initialize function must match the\par
            GPIB address of the instrument.\par
\par
\par
\par
  For VXI instrument drivers:\par
         -  the instrument is installed in the VXI mainframe and you are\par
            using one of the following controller options:\par
                  Embedded controller\par
                  MXI\par
                  MXI2\par
                  GPIB-VXI\par
\par
\par
         -  the logical address supplied to the initialize function must\par
            match the logical address of the instrument.\par
\par
\par
\par
  For RS-232 instrument drivers:\par
         -  the instrument is connected to the RS-232 interface.\par
         -  the COM port, baud rate, parity, and timeout supplied to the\par
            initialize function must match the settings of the instrument.\par
\par
\par
}\page
#{\footnote WinHelp_ErrorCodes}
${\footnote Error Codes}
K{\footnote Error Codes}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b Error Codes
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\keep\par
  Each function in this instrument driver returns a status code that\par
  either indicates success or describes an error or warning condition.\par
  Your program should examine the status code from each call to an\par
  instrument driver function to determine if an error occurred.\par
  The general meaning of the status code is as follows:\par
\par
\par
\par
       Value                  Meaning\par
       -------------------------------\par
       0                      Success\par
       Positive Values        Warnings\par
       Negative Values        Errors\par
\par
  The description of each instrument driver function lists possible error\par
  codes and their meanings\par
\par
\par
}\page
#{\footnote WinHelp_Summary}
${\footnote CPX400DP}
K{\footnote CPX400DP}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400DP
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\keep\par
  This instrument driver provides programming support for the Thurlby-Thandar\par
  CPX400 Series PSU.  The driver contains all the functions that IVI and\par
  VXIplug&play require.  In addition, the driver contains high-level functions\par
  that configure the power supply and generate output in a single operation.\par
  The driver also contains lower level functions that configure the power supply\par
  and initiate the output changes in separate operations.\par
  \par
  Note:  This driver requires the VISA and IVI libraries.\par
  \par
}\page
#{\footnote WinHelp_CPX400_CheckAttributeViBoolean}
${\footnote CPX400_CheckAttributeViBoolean}
K{\footnote CPX400_CheckAttributeViBoolean}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_CheckAttributeViBoolean
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_CheckAttributeViBoolean (ViSession instrumentHandle,\par
                                           ViChar _VI_FAR channelName[],\par
                                           ViAttr attributeID,\par
                                           ViBoolean attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function checks the validity of a value you specify for a ViBoolean\par
      attribute.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to check the attribute value. If the attribute\par
          is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViBoolean\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViBoolean are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Pass the value which you want to verify as a valid value for the\par
          attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_CheckAttributeViInt32}
${\footnote CPX400_CheckAttributeViInt32}
K{\footnote CPX400_CheckAttributeViInt32}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_CheckAttributeViInt32
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_CheckAttributeViInt32 (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViAttr attributeID,\par
                                         ViInt32 attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function checks the validity of a value you specify for a ViInt32\par
      attribute.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to check the attribute value. If the attribute\par
          is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViInt32 type.\par
            If you choose to see all IVI attributes, the data types appear\par
            to the right of the attribute names in the list box.\par
            Attributes with data types other than ViInt32 are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the value which you want to verify as a valid value for the\par
          attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_CheckAttributeViReal64}
${\footnote CPX400_CheckAttributeViReal64}
K{\footnote CPX400_CheckAttributeViReal64}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_CheckAttributeViReal64
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_CheckAttributeViReal64 (ViSession instrumentHandle,\par
                                          ViChar _VI_FAR channelName[],\par
                                          ViAttr attributeID,\par
                                          ViReal64 attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function checks the validity of a value you specify for a ViReal64\par
      attribute.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to check the attribute value. If the attribute\par
          is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViReal64\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViReal64 are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the value which you want to verify as a valid value for the\par
          attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_CheckAttributeViSession}
${\footnote CPX400_CheckAttributeViSession}
K{\footnote CPX400_CheckAttributeViSession}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_CheckAttributeViSession
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_CheckAttributeViSession (ViSession instrumentHandle,\par
                                           ViChar _VI_FAR channelName[],\par
                                           ViAttr attributeID,\par
                                           ViSession attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function checks the validity of a value you specify for a ViSession\par
      attribute.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to check the attribute value. If the attribute\par
          is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViSession\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViSession are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          Pass the value which you want to verify as a valid value for the\par
          attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_CheckAttributeViString}
${\footnote CPX400_CheckAttributeViString}
K{\footnote CPX400_CheckAttributeViString}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_CheckAttributeViString
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_CheckAttributeViString (ViSession instrumentHandle,\par
                                          ViChar _VI_FAR channelName[],\par
                                          ViAttr attributeID,\par
                                          ViChar _VI_FAR attributeValue[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function checks the validity of a value you specify for a ViString\par
      attribute.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to check the attribute value. If the attribute\par
          is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names: depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViString\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViString are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the value which you want to verify as a valid value for the\par
          attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ClearError}
${\footnote CPX400_ClearError}
K{\footnote CPX400_ClearError}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ClearError
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ClearError (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function clears the error information for the current execution\par
      thread and the IVI session you specify.  If you pass VI_NULL for the\par
      Instrument Handle parameter, this function clears the error information\par
      only for the current execution thread.\par
      \par
      The error information includes a primary error code, secondary error code,\par
      and an error elaboration string.  For a particular session, this\par
      information is the same as the values held in the following attributes:\par
      \par
      CPX400_ATTR_PRIMARY_ERROR\par
      CPX400_ATTR_SECONDARY_ERROR\par
      CPX400_ATTR_ERROR_ELABORATION\par
      \par
      This function sets the primary and secondary error codes to VI_SUCCESS\par
      (0), and sets the error elaboration string to "".\par
      \par
      The IVI Library also maintains this error information separately for each\par
      thread.  This is useful if you do not have a session handle to pass to\par
      CPX400_ClearErrorInfo or CPX400_GetErrorInfo, which occurs when a call to\par
      CPX400_init or CPX400_InitWithOptions fails.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ClearErrorInfo}
${\footnote CPX400_ClearErrorInfo}
K{\footnote CPX400_ClearErrorInfo}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ClearErrorInfo
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ClearErrorInfo (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function clears the error information for the current execution\par
      thread and the IVI session you specify.  If you pass VI_NULL for the\par
      Instrument Handle parameter, this function clears the error information\par
      only for the current execution thread.\par
      \par
      The error information includes a primary error code, secondary error code,\par
      and an error elaboration string.  For a particular session, this\par
      information is the same as the values held in the following attributes:\par
      \par
      CPX400_ATTR_PRIMARY_ERROR\par
      CPX400_ATTR_SECONDARY_ERROR\par
      CPX400_ATTR_ERROR_ELABORATION\par
      \par
      This function sets the primary and secondary error codes to VI_SUCCESS\par
      (0), and sets the error elaboration string to "".\par
      \par
      The IVI Library also maintains this error information separately for each\par
      thread.  This is useful if you do not have a session handle to pass to\par
      CPX400_ClearErrorInfo or CPX400_GetErrorInfo, which occurs when a call to\par
      CPX400_init or CPX400_InitWithOptions fails.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ClearInterchangeWarnings}
${\footnote CPX400_ClearInterchangeWarnings}
K{\footnote CPX400_ClearInterchangeWarnings}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ClearInterchangeWarnings
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ClearInterchangeWarnings (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function clears the list of current interchange warnings.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This driver defines the following status codes:\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ClearStatus}
${\footnote CPX400_ClearStatus}
K{\footnote CPX400_ClearStatus}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ClearStatus
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ClearStatus (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Clears the Standard Event Status Register, Query Error Register and\par
      Execution Error Register. This indirectly clears the Status Byte Register.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_close}
${\footnote CPX400_close}
K{\footnote CPX400_close}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_close
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_close (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function performs the following operations:\par
      \par
      - Closes the instrument I/O session.\par
      \par
      - Destroys the instrument driver session and all of its attributes.\par
      \par
      - Deallocates any memory resources the driver uses.\par
      \par
      Notes:\par
      \par
      (1) You must unlock the session before calling CPX400_close.\par
      \par
      (2) After calling CPX400_close, you cannot use the instrument driver again\par
      until you call CPX400_init or CPX400_InitWithOptions.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ConfigureCurrentLimit}
${\footnote CPX400_ConfigureCurrentLimit}
K{\footnote CPX400_ConfigureCurrentLimit}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ConfigureCurrentLimit
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ConfigureCurrentLimit (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViInt32 behavior, ViReal64 limit);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function configures the current limit.  You specify the output\par
      current limit value and the behavior of the power supply when the output\par
      current is greater than or equal to that value.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\plain\f1\fs20\keep\b
\par
      behavior\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the behavior you want the power supply to exhibit when the\par
          ouptut current is greater than or equal to the value of the limit\par
          parameter.   The driver uses this value to set the\par
          CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR attribute.\par
          \par
          Default Value:\par
          CPX400_VAL_CURRENT_REGULATE\par
          \par
          Valid Values:\par
          CPX400_VAL_CURRENT_REGULATE\par
          CPX400_VAL_CURRENT_TRIP\par
          \par
          Note:\par
          Any other value than CPX400_VAL_CURRENT_REGULATE is invalid for this\par
          PSU and is thus ignored.\par
\plain\f1\fs20\keep\b
\par
      limit\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the current limit you want to use. The driver uses this value to\par
          set the CPX400_ATTR_CURRENT_LIMIT attribute.\par
          \par
          Note that the CPX400_ATTR_RANGE_SETTING controls what can actually be\par
          set on the instrument.\par
          \par
          Units: Amps\par
          \par
          Valid Range:  0 to 20.0 Amps\par
          \par
          Default Value:  1.0 Amps\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ConfigureOCP}
${\footnote CPX400_ConfigureOCP}
K{\footnote CPX400_ConfigureOCP}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ConfigureOCP
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ConfigureOCP (ViSession instrumentHandle,\par
                                ViChar _VI_FAR channelName[], ViReal64 limit);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function configures the power supply's over-voltage protection.  You\par
      specify the over-current limit.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\plain\f1\fs20\keep\b
\par
      limit\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the over-voltage protection limit you want to use. The driver\par
          uses this value to set the CPX400_ATTR_OVP_LIMIT attribute.\par
          \par
          Units: Amps\par
          \par
          Valid Range:  0 to 21.0 Amps\par
          \par
          Default Value:  21.0 Amps\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ConfigureOutputEnabled}
${\footnote CPX400_ConfigureOutputEnabled}
K{\footnote CPX400_ConfigureOutputEnabled}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ConfigureOutputEnabled
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ConfigureOutputEnabled (ViSession instrumentHandle,\par
                                          ViChar _VI_FAR channelName[],\par
                                          ViBoolean enabled);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Configures whether the signal that the power supply produces on a channel\par
      appears at the output connector.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\plain\f1\fs20\keep\b
\par
      enabled\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Pass whether you want the signal the power supply produces on a\par
          channel to appear at the output connector.  The driver uses this value\par
          to set the CPX400_ATTR_OUTPUT_ENABLED attribute.\par
          \par
          Valid Values:\par
          VI_TRUE  - Enable the output\par
          VI_FALSE - Disable the output\par
          \par
          Default Value: VI_TRUE\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ConfigureOutputRange}
${\footnote CPX400_ConfigureOutputRange}
K{\footnote CPX400_ConfigureOutputRange}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ConfigureOutputRange
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ConfigureOutputRange (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViInt32 rangeType, ViReal64 range);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Configures the power supply's output range on a channel.  You specify\par
      whether you want to configure the voltage or current range, and the value\par
      to which to set the range.\par
      \par
      Notes:\par
      \par
      1) Setting a voltage range can invalidate a previously configured current\par
      range.\par
      \par
      2) Setting a current range can invalidate a previously configured voltage\par
      range.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to specify the output range.\par
          \par
          Valid Channel Names:  1\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      rangeType\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the type of range you want to configure.\par
          \par
          \par
          Default Value: CPX400_VAL_RANGE_CURRENT\par
          \par
          Valid Values:\par
          CPX400_VAL_RANGE_VOLTAGE\par
          CPX400_VAL_RANGE_CURRENT\par
          \par
          Notes:\par
          All though CPX400_VAL_RANGE_VOLTAGE is provided it will be ignored as\par
          this PSU only supports current.\par
\plain\f1\fs20\keep\b
\par
      range\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the range in which you want the power supply to operate.  The\par
          instrument driver coerces this value to the closest value the\par
          instrument supports that is greater than or equal to the value you\par
          specify.\par
          \par
          Units: volts (for voltage range)\par
                 amps  (for current range)\par
          \par
          Valid Range:  0.0 - 25.0 volts (for voltage range)\par
                        0.0 - 30.0 amps  (for current range)\par
          \par
          Default Value:  1.0\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ConfigureOVP}
${\footnote CPX400_ConfigureOVP}
K{\footnote CPX400_ConfigureOVP}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ConfigureOVP
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ConfigureOVP (ViSession instrumentHandle,\par
                                ViChar _VI_FAR channelName[],\par
                                ViBoolean enabled, ViReal64 limit);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function configures the power supply's over-voltage protection.  You\par
      specifiy the over-voltage limit.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\plain\f1\fs20\keep\b
\par
      enabled\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Pass whether you want to enable or disable the OVP limit.   The driver\par
          uses this value to set the CPX400_ATTR_OVP_ENABLED attribute.\par
          \par
          Valid Values:\par
          VI_TRUE  - Enable OVP limit\par
          VI_FALSE - Disable OVP limit\par
          \par
          Default Value: VI_TRUE\par
          \par
\plain\f1\fs20\keep\b
\par
      limit\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the over-voltage protection limit you want to use. The driver\par
          uses this value to set the CPX400_ATTR_OVP_LIMIT attribute.\par
          \par
          \par
          Units: Volts\par
          \par
          Valid Range:  0 to 66.0 Volts\par
          \par
          \par
          Default Value:  66.0 Volts\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ConfigureVoltageLevel}
${\footnote CPX400_ConfigureVoltageLevel}
K{\footnote CPX400_ConfigureVoltageLevel}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ConfigureVoltageLevel
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ConfigureVoltageLevel (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViReal64 level);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function configures the DC voltage level the power supply attempts to\par
      generate.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\plain\f1\fs20\keep\b
\par
      level\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the DC voltage you want the power supply to attempt to generate.\par
          The driver uses this value to set the CPX400_ATTR_VOLTAGE_LEVEL\par
          attribute.\par
          \par
          Note that the CPX400_ATTR_RANGE_SETTING controls what can actually be\par
          set on the instrument.\par
          \par
          Units: volts\par
          \par
          Valid Range:  0 to 60.0 Volts\par
          \par
          Default Value:  1.0 Volts\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_DecrementCurrentLevel}
${\footnote CPX400_DecrementCurrentLevel}
K{\footnote CPX400_DecrementCurrentLevel}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_DecrementCurrentLevel
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_DecrementCurrentLevel (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Decrements the current level limit by the step size set for the output\par
      channel specified.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_DecrementVoltageLevel}
${\footnote CPX400_DecrementVoltageLevel}
K{\footnote CPX400_DecrementVoltageLevel}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_DecrementVoltageLevel
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_DecrementVoltageLevel (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Decrements the output voltage by the step size set for the output channel\par
      specified.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_Disable}
${\footnote CPX400_Disable}
K{\footnote CPX400_Disable}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_Disable
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_Disable (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function places the instrument in a quiescent state where it has\par
      minimal or no impact on the system to which it is connected. This is done\par
      by disabling all outputs and is the same as using the attribute\par
      CPX400_ATTR_OUTPUT_ENABLED_ALL.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_error_message}
${\footnote CPX400_error_message}
K{\footnote CPX400_error_message}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_error_message
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_error_message (ViSession instrumentHandle,\par
                                 ViStatus errorCode,\par
                                 ViChar _VI_FAR errorMessage[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function converts a status code returned by an instrument driver\par
      function into a user-readable string.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          You can pass VI_NULL for this parameter.  This is useful when one of\par
          the initialize functions fail.\par
          \par
          Default Value:  VI_NULL\par
          \par
\plain\f1\fs20\keep\b
\par
      errorCode\par
\plain\f1\fs18\keep
\par
          Variable Type       ViStatus\par
\par
          Pass the Status parameter that is returned from any of the instrument\par
          driver functions.\par
          \par
          Default Value:  0  (VI_SUCCESS)\par
          \par
          IVI Engine Status Codes:\par
          Status    Description\par
          -------------------------------------------------\par
          ERRORS:\par
          BFFA0001  Instrument error. Call CPX400_error_query.\par
          BFFA0002  Cannot open file.\par
          BFFA0003  Error reading from file.\par
          BFFA0004  Error writing to file.\par
          BFFA0005  Driver module file not found.\par
          BFFA0006  Cannot open driver module file for reading.\par
          BFFA0007  Driver module has invalid file format or invalid data.\par
          BFFA0008  Driver module contains undefined references.\par
          BFFA0009  Cannot find function in driver module.\par
          BFFA000A  Failure loading driver module.\par
          BFFA000B  Invalid path name.\par
          BFFA000C  Invalid attribute.\par
          BFFA000D  IVI attribute is not writable.\par
          BFFA000E  IVI attribute is not readable.\par
          BFFA000F  Invalid parameter.\par
          BFFA0010  Invalid value.\par
          BFFA0011  Function not supported.\par
          BFFA0012  Attribute not supported.\par
          BFFA0013  Value not supported.\par
          BFFA0014  Invalid type.\par
          BFFA0015  Types do not match.\par
          BFFA0016  Attribute already has a value waiting to be updated.\par
          BFFA0017  Specified item already exists.\par
          BFFA0018  Not a valid configuration.\par
          BFFA0019  Requested item does not exist or value not available.\par
          BFFA001A  Requested attribute value not known.\par
          BFFA001B  No range table.\par
          BFFA001C  Range table is invalid.\par
          BFFA001D  Object or item is not initialized.\par
          BFFA001E  Non-interchangeable behavior.\par
          BFFA001F  No channel table has been built for the session.\par
          BFFA0020  Channel name specified is not valid.\par
          BFFA0021  Unable to allocate system resource.\par
          BFFA0022  Permission to access file was denied.\par
          BFFA0023  Too many files are already open.\par
          BFFA0024  Unable to create temporary file in target directory.\par
          BFFA0025  All temporary filenames already used.\par
          BFFA0026  Disk is full.\par
          BFFA0027  Cannot find configuration file on disk.\par
          BFFA0028  Cannot open configuration file.\par
          BFFA0029  Error reading configuration file.\par
          BFFA002A  Invalid ViInt32 value in configuration file.\par
          BFFA002B  Invalid ViReal64 value in configuration file.\par
          BFFA002C  Invalid ViBoolean value in configuration file.\par
          BFFA002D  Entry missing from configuration file.\par
          BFFA002E  Initialization failed in driver DLL.\par
          BFFA002F  Driver module has unresolved external reference.\par
          BFFA0030  Cannot find CVI Run-Time Engine.\par
          BFFA0031  Cannot open CVI Run-Time Engine.\par
          BFFA0032  CVI Run-Time Engine has invalid format.\par
          BFFA0033  CVI Run-Time Engine is missing required function(s).\par
          BFFA0034  CVI Run-Time Engine initialization failed.\par
          BFFA0035  CVI Run-Time Engine has unresolved external reference.\par
          BFFA0036  Failure loading CVI Run-Time Engine.\par
          BFFA0037  Cannot open DLL for read exports.\par
          BFFA0038  DLL file is corrupt.\par
          BFFA0039  No DLL export table in DLL.\par
          BFFA003A  Unknown attribute name in default configuration file.\par
          BFFA003B  Unknown attribute value in default configuration file.\par
          BFFA003C  Memory pointer specified is not known.\par
          BFFA003D  Unable to find any channel strings.\par
          BFFA003E  Duplicate channel string.\par
          BFFA003F  Duplicate virtual channel name.\par
          BFFA0040  Missing virtual channel name.\par
          BFFA0041  Bad virtual channel name.\par
          BFFA0042  Unassigned virtual channel name.\par
          BFFA0043  Bad virtual channel assignment.\par
          BFFA0044  Channel name required.\par
          BFFA0045  Channel name not allowed.\par
          BFFA0046  Attribute not valid for channel.\par
          BFFA0047  Attribute must be channel based.\par
          BFFA0048  Channel already excluded.\par
          BFFA0049  Missing option name (nothing before the '=').\par
          BFFA004A  Missing option value (nothing after the '=').\par
          BFFA004B  Bad option name.\par
          BFFA004C  Bad option value.\par
          BFFA004D  Operation only valid on a class driver session.\par
          BFFA004E  "ivi.ini" filename is reserved.\par
          BFFA004F  Duplicate run-time configuration entry.\par
          BFFA0050  Index parameter is one-based.\par
          BFFA0051  Index parameter is too high.\par
          BFFA0052  Attribute is not cacheable.\par
          BFFA0053  You cannot export a ViAddr attribute to the end-user.\par
          BFFA0054  Bad channel string in channel string list.\par
          BFFA0055  Bad prefix name in default configuration file.\par
          \par
          VISA Status Codes:\par
          Status    Description\par
          -------------------------------------------------\par
          WARNINGS:\par
          3FFF0002 Event enabled for one or more specified mechanisms.\par
          3FFF0003 Event disabled for one or more specified mechanisms.\par
          3FFF0004 Successful, but queue already empty.\par
          3FFF0005 Specified termination character was read.\par
          3FFF0006 Number of bytes transferred equals input count.\par
          3FFF0077 Configuration non-existant or could not be loaded.\par
          3FFF007D Open successful, but the device not responding.\par
          3FFF0080 Wait successful, but more event objects available.\par
          3FFF0082 Specified object reference is uninitialized.\par
          3FFF0084 Attribute value not supported.\par
          3FFF0085 Status code could not be interpreted.\par
          3FFF0088 Specified I/O buffer type not supported.\par
          3FFF0098 Successful,  but invoke no handlers for this event.\par
          3FFF0099 Successful but session has nested shared locks.\par
          3FFF009A Successful but session has nested exclusive locks.\par
          3FFF009B Successful but operation not asynchronous.\par
          \par
          ERRORS:\par
          BFFF0000 Unknown system error (miscellaneous error).\par
          BFFF000E Session or object reference is invalid.\par
          BFFF000F Resource is locked.\par
          BFFF0010 Invalid expression specified for search.\par
          BFFF0011 Resource is not present in the system.\par
          BFFF0012 Invalid resource reference specified.  Parsing error.\par
          BFFF0013 Invalid access mode.\par
          BFFF0015 Timeout expired before operation completed.\par
          BFFF0016 Unable to deallocate session data structures.\par
          BFFF001B Specified degree is invalid.\par
          BFFF001C Specified job identifier is invalid.\par
          BFFF001D Attribute is not supported by the referenced object.\par
          BFFF001E Attribute state not supported by the referenced object.\par
          BFFF001F Specified attribute is read-only.\par
          BFFF0020 Lock type lock not supported by this resource.\par
          BFFF0021 Invalid access key.\par
          BFFF0026 Specified event type not supported by the resource.\par
          BFFF0027 Invalid mechanism specified.\par
          BFFF0028 A handler was not installed.\par
          BFFF0029 Handler reference either invalid or was not installed.\par
          BFFF002A Specified event context invalid.\par
          BFFF002D Event queue for specified type has overflowed.\par
          BFFF002F Event type must be enabled in order to receive.\par
          BFFF0030 User abort during transfer.\par
          BFFF0034 Violation of raw write protocol during transfer.\par
          BFFF0035 Violation of raw read protocol during transfer.\par
          BFFF0036 Device reported output protocol error during transfer.\par
          BFFF0037 Device reported input protocol error during transfer.\par
          BFFF0038 Bus error during transfer.\par
          BFFF0039 Unable to queue asynchronous operation.\par
          BFFF003A Unable to start operation because setup is invalid.\par
          BFFF003B Unable to queue the asynchronous operation.\par
          BFFF003C Insufficient resources to perform memory allocation.\par
          BFFF003D Invalid buffer mask specified.\par
          BFFF003E I/O error.\par
          BFFF003F Format specifier invalid.\par
          BFFF0041 Format specifier not supported.\par
          BFFF0042 Trigger line is currently in use.\par
          BFFF004A Service request not received for the session.\par
          BFFF004E Invalid address space specified.\par
          BFFF0051 Invalid offset specified.\par
          BFFF0052 Invalid access width specified.\par
          BFFF0054 Offset not accessible from this hardware.\par
          BFFF0055 Source and destination widths are different.\par
          BFFF0057 Session not currently mapped.\par
          BFFF0059 Previous response still pending.\par
          BFFF005F No listeners condition detected.\par
          BFFF0060 Interface not currently the controller in charge.\par
          BFFF0061 Interface not the system controller.\par
          BFFF0067 Session does not support this operation.\par
          BFFF006A A parity error occurred during transfer.\par
          BFFF006B A framing error occurred during transfer.\par
          BFFF006C An overrun error occurred during transfer.\par
          BFFF0070 Offset not properly aligned for operation access width.\par
          BFFF0071 Specified user buffer not valid.\par
          BFFF0072 Resource valid, but VISA cannot access it.\par
          BFFF0076 Width not supported by this hardware.\par
          BFFF0078 Invalid parameter value, parameter unknown.\par
          BFFF0079 Invalid protocol.\par
          BFFF007B Invalid window size.\par
          BFFF0080 Session currently contains a mapped window.\par
          BFFF0081 Operation not implemented.\par
          BFFF0083 Invalid length.\par
          BFFF0091 Invalid mode.\par
          BFFF009C Session did not have a lock on the resource.\par
          BFFF009D The device does not export any memory.\par
          BFFF009E VISA-required code library not located or not loaded.\par
          \par
          VXIPnP Driver Status Codes:\par
          Status    Description\par
          -------------------------------------------------\par
          WARNINGS:\par
          3FFC0101  Instrument does not have ID Query capability.\par
          3FFC0102  Instrument does not have Reset capability.\par
          3FFC0103  Instrument does not have Self-Test capability.\par
          3FFC0104  Instrument does not have Error Query capability.\par
          3FFC0105  Instrument does not have Revision Query capability.\par
          \par
          ERRORS:\par
          BFFC0001  Parameter 1 out of range, or error trying to set it.\par
          BFFC0002  Parameter 2 out of range, or error trying to set it.\par
          BFFC0003  Parameter 3 out of range, or error trying to set it.\par
          BFFC0004  Parameter 4 out of range, or error trying to set it.\par
          BFFC0005  Parameter 5 out of range, or error trying to set it.\par
          BFFC0006  Parameter 6 out of range, or error trying to set it.\par
          BFFC0007  Parameter 7 out of range, or error trying to set it.\par
          BFFC0008  Parameter 8 out of range, or error trying to set it.\par
          BFFC0011  Instrument failed the ID Query.\par
          BFFC0012  Invalid response from instrument.\par
\plain\f1\fs20\keep\b
\par
      errorMessage\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the user-readable message string that corresponds to the\par
          status code you specify.\par
          \par
          You must pass a ViChar array with at least 256 bytes.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_error_query}
${\footnote CPX400_error_query}
K{\footnote CPX400_error_query}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_error_query
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_error_query (ViSession instrumentHandle, ViPInt32 errorCode,\par
                               ViChar _VI_FAR errorMessage[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function reads an error code and a message from the instrument's\par
      error queue.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      errorCode\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32 (passed by reference)\par
\par
          Returns the error code read from the instrument's error queue.\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      errorMessage\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the error message string read from the instrument's error\par
          message queue.\par
          \par
          You must pass a ViChar array with at least 256 bytes.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_execution_error_query}
${\footnote CPX400_execution_error_query}
K{\footnote CPX400_execution_error_query}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_execution_error_query
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_execution_error_query (ViSession instrumentHandle,\par
                                         ViPInt32 errorCode,\par
                                         ViChar _VI_FAR errorMessage[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function reads an error code and a message from the instrument's\par
      error queue.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      errorCode\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32 (passed by reference)\par
\par
          Returns the error code read from the instrument's error queue.\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      errorMessage\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the error message string read from the instrument's error\par
          message queue.\par
          \par
          You must pass a ViChar array with at least 256 bytes.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetAttributeViBoolean}
${\footnote CPX400_GetAttributeViBoolean}
K{\footnote CPX400_GetAttributeViBoolean}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetAttributeViBoolean
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetAttributeViBoolean (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViAttr attributeID,\par
                                         ViPBoolean attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function queries the value of a ViBoolean attribute.\par
      \par
      You can use this function to get the values of instrument- specific\par
      attributes and inherent IVI attributes.  If the attribute represents an\par
      instrument state, this function performs instrument I/O in the following\par
      cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to obtain the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Help text is\par
            shown for each attribute.  Select an attribute by\par
            double-clicking on it or by selecting it and then pressing\par
            <ENTER>.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViBoolean\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViBoolean are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean (passed by reference)\par
\par
          Returns the current value of the attribute.  Pass the address of a\par
          ViBoolean variable.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has named constants as valid values, you can view a\par
            list of the constants by pressing <ENTER> on this control.\par
            Select a value by double-clicking on it or by selecting it and\par
            then pressing <ENTER>.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetAttributeViInt32}
${\footnote CPX400_GetAttributeViInt32}
K{\footnote CPX400_GetAttributeViInt32}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetAttributeViInt32
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetAttributeViInt32 (ViSession instrumentHandle,\par
                                       ViChar _VI_FAR channelName[],\par
                                       ViAttr attributeID,\par
                                       ViPInt32 attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function queries the value of a ViInt32 attribute.\par
      \par
      You can use this function to get the values of instrument- specific\par
      attributes and inherent IVI attributes.  If the attribute represents an\par
      instrument state, this function performs instrument I/O in the following\par
      cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to obtain the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Help text is\par
            shown for each attribute.  Select an attribute by\par
            double-clicking on it or by selecting it and then pressing\par
            <ENTER>.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViInt32 type.\par
            If you choose to see all IVI attributes, the data types appear\par
            to the right of the attribute names in the list box.\par
            Attributes with data types other than ViInt32 are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32 (passed by reference)\par
\par
          Returns the current value of the attribute.  Pass the address of a\par
          ViInt32 variable.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has named constants as valid values, you can view a\par
            list of the constants by pressing <ENTER> on this control.\par
            Select a value by double-clicking on it or by selecting it and\par
            then pressing <ENTER>.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetAttributeViReal64}
${\footnote CPX400_GetAttributeViReal64}
K{\footnote CPX400_GetAttributeViReal64}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetAttributeViReal64
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetAttributeViReal64 (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViAttr attributeID,\par
                                        ViPReal64 attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function queries the value of a ViReal64 attribute.\par
      \par
      You can use this function to get the values of instrument- specific\par
      attributes and inherent IVI attributes.  If the attribute represents an\par
      instrument state, this function performs instrument I/O in the following\par
      cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to obtain the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Help text is\par
            shown for each attribute.  Select an attribute by\par
            double-clicking on it or by selecting it and then pressing\par
            <ENTER>.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViReal64\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViReal64 are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64 (passed by reference)\par
\par
          Returns the current value of the attribute.  Pass the address of a\par
          ViReal64 variable.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has named constants as valid values, you can view a\par
            list of the constants by pressing <ENTER> on this control.\par
            Select a value by double-clicking on it or by selecting it and\par
            then pressing <ENTER>.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetAttributeViSession}
${\footnote CPX400_GetAttributeViSession}
K{\footnote CPX400_GetAttributeViSession}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetAttributeViSession
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetAttributeViSession (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViAttr attributeID,\par
                                         ViPSession attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function queries the value of a ViSession attribute.\par
      \par
      You can use this function to get the values of instrument- specific\par
      attributes and inherent IVI attributes.  If the attribute represents an\par
      instrument state, this function performs instrument I/O in the following\par
      cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to obtain the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Help text is\par
            shown for each attribute.  Select an attribute by\par
            double-clicking on it or by selecting it and then pressing\par
            <ENTER>.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViSession\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViSession are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession (passed by reference)\par
\par
          Returns the current value of the attribute.  Pass the address of a\par
          ViSession variable.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has named constants as valid values, you can view a\par
            list of the constants by pressing <ENTER> on this control.\par
            Select a value by double-clicking on it or by selecting it and\par
            then pressing <ENTER>.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetAttributeViString}
${\footnote CPX400_GetAttributeViString}
K{\footnote CPX400_GetAttributeViString}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetAttributeViString
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetAttributeViString (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViAttr attributeID, ViInt32 bufferSize,\par
                                        ViChar _VI_FAR attributeValue[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function queries the value of a ViString attribute.\par
      \par
      You can use this function to get the values of instrument- specific\par
      attributes and inherent IVI attributes.  If the attribute represents an\par
      instrument state, this function performs instrument I/O in the following\par
      cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid.\par
      \par
      You must provide a ViChar array to serve as a buffer for the value.  You\par
      pass the number of bytes in the buffer as the Buffer Size parameter.  If\par
      the current value of the attribute, including the terminating NUL byte, is\par
      larger than the size you indicate in the Buffer Size parameter, the\par
      function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL\par
      byte at the end of the buffer, and returns the buffer size you must pass\par
      to get the entire value.  For example, if the value is "123456" and the\par
      Buffer Size is 4, the function places "123" into the buffer and returns 7.\par
      \par
      If you want to call this function just to get the required buffer size,\par
      you can pass 0 for the Buffer Size and VI_NULL for the Attribute Value\par
      buffer.\par
      \par
      If you want the function to fill in the buffer regardless of the   number\par
      of bytes in the value, pass a negative number for the Buffer Size\par
      parameter.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to obtain the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Help text is\par
            shown for each attribute.  Select an attribute by\par
            double-clicking on it or by selecting it and then pressing\par
            <ENTER>.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViString\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViString are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      bufferSize\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the number of bytes in the ViChar array you specify for the\par
          Attribute Value parameter.\par
          \par
          If the current value of the attribute, including the terminating NUL\par
          byte, contains more bytes that you indicate in this parameter, the\par
          function copies Buffer Size - 1 bytes into the buffer, places an ASCII\par
          NUL byte at the end of the buffer, and returns the buffer size you\par
          must pass to get the entire value.  For example, if the value is\par
          "123456" and the Buffer Size is 4, the function places "123" into the\par
          buffer and returns 7.\par
          \par
          If you pass a negative number, the function copies the value to the\par
          buffer regardless of the number of bytes in the value.\par
          \par
          If you pass 0, you can pass VI_NULL for the Attribute Value buffer\par
          parameter.\par
          \par
          \par
          Default Value: 512\par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          The buffer in which the function returns the current value of the\par
          attribute.  The buffer must be of type ViChar and have at least as\par
          many bytes as indicated in the Buffer Size parameter.\par
          \par
          If the current value of the attribute, including the terminating NUL\par
          byte, contains more bytes that you indicate in this parameter, the\par
          function copies Buffer Size - 1 bytes into the buffer, places an ASCII\par
          NUL byte at the end of the buffer, and returns the buffer size you\par
          must pass to get the entire value.  For example, if the value is\par
          "123456" and the Buffer Size is 4, the function places "123" into the\par
          buffer and returns 7.\par
          \par
          If you specify 0 for the Buffer Size parameter, you can pass VI_NULL\par
          for this parameter.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has named constants as valid values, you can view a\par
            list of the constants by pressing <ENTER> on this control.\par
            Select a value by double-clicking on it or by selecting it and\par
            then pressing <ENTER>.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          If the current value of the return buffer, including the terminating\par
          NUL byte, is larger than the size you indicate in the Buffer Size\par
          parameter, the function copies Buffer Size - 1 bytes into the buffer,\par
          places an ASCII NUL byte at the end of the buffer, and returns the\par
          buffer size you must pass to get the entire value.  For example, if\par
          the value is "123456" and the Buffer Size is 4, the function places\par
          "123" into the buffer and returns 7.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetChannelName}
${\footnote CPX400_GetChannelName}
K{\footnote CPX400_GetChannelName}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetChannelName
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetChannelName (ViSession instrumentHandle, ViInt32 index,\par
                                  ViInt32 bufferSize,\par
                                  ViChar _VI_FAR channelName[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the highest-level channel name that corresponds to\par
      the specific driver channel string that is in the channel table at an\par
      index you specify.  By passing 0 for the buffer size, the caller can\par
      ascertain the buffer size required to get the entire channel name string\par
      and then call the function again with a sufficiently large buffer.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
\plain\f1\fs20\keep\b
\par
      index\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          A 1-based index into the channel table.\par
          \par
          Default Value: 1\par
          \par
\plain\f1\fs20\keep\b
\par
      bufferSize\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the number of bytes in the ViChar array you specify for the\par
          Channel Name parameter.\par
          \par
          If the channel name, including the terminating NUL byte, contains more\par
          bytes than you indicate in this parameter, the function copies\par
          BufferSize - 1 bytes into the buffer, places an ASCII NUL byte at the\par
          end of the buffer, and returns the buffer size you must pass to get\par
          the entire value.  For example, if the value is "123456" and the\par
          Buffer Size is 4, the function places "123" into the buffer and\par
          returns 7.\par
          \par
          If you pass a negative number, the function copies the value to the\par
          buffer regardless of the number of bytes in the value.\par
          \par
          If you pass 0, you can pass VI_NULL for the Channel Name buffer\par
          parameter.\par
          \par
          Default Value:  None\par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the highest-level channel name that corresponds to the\par
          specific driver channel string that is in the channel table at an\par
          index you specify..\par
          \par
          The buffer must contain at least as many elements as the value you\par
          specify with the Buffer Size parameter.  If the channel name\par
          description, including the terminating NUL byte, contains more bytes\par
          than you indicate with the Buffer Size parameter, the function copies\par
          Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the\par
          end of the buffer, and returns the buffer size you must pass to get\par
          the entire value.  For example, if the value is "123456" and the\par
          Buffer Size is 4, the function places "123" into the buffer and\par
          returns 7.\par
          \par
          If you pass 0 for the Buffer Size, you can pass VI_NULL for this\par
          parameter.\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          If the current value of the return buffer, including the terminating\par
          NUL byte, is larger than the size you indicate in the Buffer Size\par
          parameter, the function copies Buffer Size - 1 bytes into the buffer,\par
          places an ASCII NUL byte at the end of the buffer, and returns the\par
          buffer size you must pass to get the entire value.  For example, if\par
          the value is "123456" and the Buffer Size is 4, the function places\par
          "123" into the buffer and returns 7.\par
          \par
          To obtain a text description of the status code, or if the status code\par
          is not listed below, call the CPX400_error_message function.  To\par
          obtain additional information about the error condition, use the\par
          CPX400_GetError and CPX400_ClearError functions.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
}\page
#{\footnote WinHelp_CPX400_GetError}
${\footnote CPX400_GetError}
K{\footnote CPX400_GetError}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetError
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetError (ViSession instrumentHandle, ViPStatus primaryError,\par
                            ViPStatus secondaryError,\par
                            ViChar _VI_FAR errorElaboration[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the error information associated with an IVI session\par
      or with the current execution thread.  If you specify a valid IVI session\par
      for the Instrument Handle parameter, this function retrieves and then\par
      clears the error information for the session.  If you pass VI_NULL for the\par
      Instrument Handle parameter, this function retrieves and then clears the\par
      error information for the current execution thread.\par
      \par
      The error information includes a primary error, secondary error, and an\par
      error elaboration string.  For a particular session, this information is\par
      the same as the values held in the following attributes:\par
      \par
      CPX400_ATTR_PRIMARY_ERROR\par
      CPX400_ATTR_SECONDARY_ERROR\par
      CPX400_ATTR_ERROR_ELABORATION\par
      \par
      The IVI Library also maintains this error information separately for each\par
      thread.  This is useful if you do not have a session handle to pass to\par
      CPX400_GetErrorInfo or CPX400_ClearErrorInfo, which\par
      occurs when a call to CPX400_init or CPX400_InitWithOptions fails.\par
      \par
      You can call CPX400_error_message to obtain a text description of the\par
      primary or secondary error value.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  VI_NULL\par
          \par
\plain\f1\fs20\keep\b
\par
      primaryError\par
\plain\f1\fs18\keep
\par
          Variable Type       ViStatus (passed by reference)\par
\par
          The primary error code for the session or execution thread.   The\par
          value is the same as the one held by the attribute\par
          CPX400_ATTR_PRIMARY_ERROR.\par
          \par
          A value of VI_SUCCESS (0) indicates that no error occurred,  A\par
          positive value indicates a warning.  A negative value indicates an\par
          error.\par
          \par
          You can call CPX400_error_message to get a text description of the\par
          value.\par
          \par
          If you are not interested in this value, you can pass VI_NULL.\par
\plain\f1\fs20\keep\b
\par
      secondaryError\par
\plain\f1\fs18\keep
\par
          Variable Type       ViStatus (passed by reference)\par
\par
          The secondary error code for the session or execution thread.  If the\par
          primary error code is non-zero, the secondary error code can further\par
          describe the error or warning condition.  The value is the same as the\par
          one held by the attribute CPX400_ATTR_SECONDARY_ERROR.\par
          \par
          A value of VI_SUCCESS (0) indicates no further description.\par
          \par
          You can call CPX400_error_message to get a text description of the\par
          value.\par
          \par
          If you are not interested in this value, you can pass VI_NULL.\par
          \par
\plain\f1\fs20\keep\b
\par
      errorElaboration\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          The error elaboration string for the session or execution thread.  If\par
          the primary error code is non-zero, the elaboration string can further\par
          describe the error or warning condition.   The value is the same as\par
          the one held by the attribute CPX400_ATTR_ERROR_ELABORATION.\par
          \par
          If you are not interested in this value, you can pass VI_NULL.\par
          Otherwise, you must pass a ViChar array with at least 256 bytes.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetErrorInfo}
${\footnote CPX400_GetErrorInfo}
K{\footnote CPX400_GetErrorInfo}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetErrorInfo
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetErrorInfo (ViSession instrumentHandle,\par
                                ViPStatus primaryError,\par
                                ViPStatus secondaryError,\par
                                ViChar _VI_FAR errorElaboration[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the error information associated with an IVI session\par
      or with the current execution thread.  If you specify a valid IVI session\par
      for the Instrument Handle parameter, this function retrieves and then\par
      clears the error information for the session.  If you pass VI_NULL for the\par
      Instrument Handle parameter, this function retrieves and then clears the\par
      error information for the current execution thread.\par
      \par
      The error information includes a primary error, secondary error, and an\par
      error elaboration string.  For a particular session, this information is\par
      the same as the values held in the following attributes:\par
      \par
      CPX400_ATTR_PRIMARY_ERROR\par
      CPX400_ATTR_SECONDARY_ERROR\par
      CPX400_ATTR_ERROR_ELABORATION\par
      \par
      The IVI Library also maintains this error information separately for each\par
      thread.  This is useful if you do not have a session handle to pass to\par
      CPX400_GetErrorInfo or CPX400_ClearErrorInfo, which\par
      occurs when a call to CPX400_init or CPX400_InitWithOptions fails.\par
      \par
      You can call CPX400_error_message to obtain a text description of the\par
      primary or secondary error value.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  VI_NULL\par
          \par
\plain\f1\fs20\keep\b
\par
      primaryError\par
\plain\f1\fs18\keep
\par
          Variable Type       ViStatus (passed by reference)\par
\par
          The primary error code for the session or execution thread.   The\par
          value is the same as the one held by the attribute\par
          CPX400_ATTR_PRIMARY_ERROR.\par
          \par
          A value of VI_SUCCESS (0) indicates that no error occurred,  A\par
          positive value indicates a warning.  A negative value indicates an\par
          error.\par
          \par
          You can call CPX400_error_message to get a text description of the\par
          value.\par
          \par
          If you are not interested in this value, you can pass VI_NULL.\par
\plain\f1\fs20\keep\b
\par
      secondaryError\par
\plain\f1\fs18\keep
\par
          Variable Type       ViStatus (passed by reference)\par
\par
          The secondary error code for the session or execution thread.  If the\par
          primary error code is non-zero, the secondary error code can further\par
          describe the error or warning condition.  The value is the same as the\par
          one held by the attribute CPX400_ATTR_SECONDARY_ERROR.\par
          \par
          A value of VI_SUCCESS (0) indicates no further description.\par
          \par
          You can call CPX400_error_message to get a text description of the\par
          value.\par
          \par
          If you are not interested in this value, you can pass VI_NULL.\par
          \par
\plain\f1\fs20\keep\b
\par
      errorElaboration\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          The error elaboration string for the session or execution thread.  If\par
          the primary error code is non-zero, the elaboration string can further\par
          describe the error or warning condition.   The value is the same as\par
          the one held by the attribute CPX400_ATTR_ERROR_ELABORATION.\par
          \par
          If you are not interested in this value, you can pass VI_NULL.\par
          Otherwise, you must pass a ViChar array with at least 256 bytes.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetNextCoercionRecord}
${\footnote CPX400_GetNextCoercionRecord}
K{\footnote CPX400_GetNextCoercionRecord}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetNextCoercionRecord
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetNextCoercionRecord (ViSession instrumentHandle,\par
                                         ViInt32 bufferSize,\par
                                         ViChar _VI_FAR coercionRecord[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the coercion information associated with the IVI\par
      session.  This function retrieves and clears the oldest instance in which\par
      the instrument driver coerced a value you specified to another value.\par
      \par
      If you set the CPX400_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the\par
      instrument driver keeps a list of all coercions it makes on ViInt32 or\par
      ViReal64 values you pass to instrument driver functions.  You use this\par
      function to retrieve information from that list.\par
      \par
      If the next coercion record string, including the terminating NUL byte,\par
      contains more bytes than you indicate in this parameter, the function\par
      copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at\par
      the end of the buffer, and returns the buffer size you must pass to get\par
      the entire value.  For example, if the value is "123456" and the Buffer\par
      Size is 4, the function places "123" into the buffer and returns 7.\par
      \par
      If you pass a negative number, the function copies the value to the buffer\par
      regardless of the number of bytes in the value.\par
      \par
      If you pass 0, you can pass VI_NULL for the Coercion Record buffer\par
      parameter.\par
      \par
      The function returns an empty string in the Coercion Record parameter if\par
      no coercion records remain for the session.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init function.\par
          The handle identifies a particular instrument session.\par
          \par
          Default Value:  None\par
\plain\f1\fs20\keep\b
\par
      bufferSize\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the number of bytes in the ViChar array you specify for the\par
          Coercion Record parameter.\par
          \par
          If the next coercion record string, including the terminating NUL\par
          byte, contains more bytes than you indicate in this parameter, the\par
          function copies Buffer Size - 1 bytes into the buffer, places an ASCII\par
          NUL byte at the end of the buffer, and returns the buffer size you\par
          must pass to get the entire value.  For example, if the value is\par
          "123456" and the Buffer Size is 4, the function places "123" into the\par
          buffer and returns 7.\par
          \par
          If you pass a negative number, the function copies the value to the\par
          buffer regardless of the number of bytes in the value.\par
          \par
          If you pass 0, you can pass VI_NULL for the Coercion Record buffer\par
          parameter.\par
          \par
          Default Value:  None\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      coercionRecord\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the next coercion record for the IVI session.  If there are no\par
          coercion records, the function returns an empty string.\par
          \par
          The buffer must contain at least as many elements as the value you\par
          specify with the Buffer Size parameter.  If the next coercion record\par
          string, including the terminating NUL byte, contains more bytes than\par
          you indicate with the Buffer Size parameter, the function copies\par
          Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the\par
          end of the buffer, and returns the buffer size you must pass to get\par
          the entire value.  For example, if the value is "123456" and the\par
          Buffer Size is 4, the function places "123" into the buffer and\par
          returns 7.\par
          \par
          This parameter returns an empty string if no coercion records remain\par
          for the session.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          If the current value of the return buffer, including the terminating\par
          NUL byte, is larger than the size you indicate in the Buffer Size\par
          parameter, the function copies Buffer Size - 1 bytes into the buffer,\par
          places an ASCII NUL byte at the end of the buffer, and returns the\par
          buffer size you must pass to get the entire value.  For example, if\par
          the value is "123456" and the Buffer Size is 4, the function places\par
          "123" into the buffer and returns 7.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_GetNextInterchangeWarning}
${\footnote CPX400_GetNextInterchangeWarning}
K{\footnote CPX400_GetNextInterchangeWarning}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_GetNextInterchangeWarning
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_GetNextInterchangeWarning (ViSession instrumentHandle,\par
                                             ViInt32 bufferSize,\par
                                             ViChar _VI_FAR interchangeWarning[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the interchangeability warnings associated with the\par
      IVI session. It retrieves and clears the oldest instance in which the\par
      class driver recorded an interchangeability warning.  Interchangeability\par
      warnings indicate that using your application with a different instrument\par
      might cause different behavior. You use this function to retrieve\par
      interchangeability warnings.\par
      \par
      The driver performs interchangeability checking when the\par
      CPX400_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.\par
      \par
      The function returns an empty string in the Interchange Warning parameter\par
      if no interchangeability warnings remain for the session.\par
      \par
      In general, the instrument driver generates interchangeability warnings\par
      when an attribute that affects the behavior of the instrument is in a\par
      state that you did not specify.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      bufferSize\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the number of bytes in the ViChar array you specify for the\par
          Interchange Warning parameter.\par
          \par
          If the next interchangeability warning string, including the\par
          terminating NUL byte, contains more bytes than you indicate in this\par
          parameter, the function copies Buffer Size - 1 bytes into the buffer,\par
          places an ASCII NUL byte at the end of the buffer, and returns the\par
          buffer size you must pass to get the entire value. For example, if the\par
          value is "123456" and the Buffer Size is 4, the function places "123"\par
          into the buffer and returns 7.\par
          \par
          If you pass a negative number, the function copies the value to the\par
          buffer regardless of the number of bytes in the value.\par
          \par
          If you pass 0, you can pass VI_NULL for the Interchange Warning buffer\par
          parameter.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      interchangeWarning\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the next interchange warning for the IVI session. If there are\par
          no interchange warnings, the function returns an empty  string.\par
          \par
          The buffer must contain at least as many elements as the value you\par
          specify with the Buffer Size parameter. If the next interchangeability\par
          warning string, including the terminating NUL byte, contains more\par
          bytes than you indicate with the Buffer Size parameter, the function\par
          copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte\par
          at the end of the buffer, and returns the buffer size you must pass to\par
          get the entire value.  For example, if the value is "123456" and the\par
          Buffer Size is 4, the function places "123" into the buffer and\par
          returns 7.\par
          \par
          This parameter returns an empty string if no interchangeability\par
          warnings remain for the session.\par
          \par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          If the current value of the return buffer, including the terminating\par
          NUL byte, is larger than the size you indicate in the Buffer Size\par
          parameter, the function copies Buffer Size - 1 bytes into the buffer,\par
          places an ASCII NUL byte at the end of the buffer, and returns the\par
          buffer size you must pass to get the entire value.  For example, if\par
          the value is "123456" and the Buffer Size is 4, the function places\par
          "123" into the buffer and returns 7.\par
          \par
          To obtain a text description of the status code, or if the status code\par
          is not listed below, call the CPX400_error_message function.  To\par
          obtain additional information about the error condition, use the\par
          CPX400_GetError and CPX400_ClearError functions.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This driver defines the following status codes:\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
}\page
#{\footnote WinHelp_CPX400_IncrementCurrentLevel}
${\footnote CPX400_IncrementCurrentLevel}
K{\footnote CPX400_IncrementCurrentLevel}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_IncrementCurrentLevel
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_IncrementCurrentLevel (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Increments the current level limit by the step size set for the output\par
      channel specified.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_IncrementVoltageLevel}
${\footnote CPX400_IncrementVoltageLevel}
K{\footnote CPX400_IncrementVoltageLevel}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_IncrementVoltageLevel
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_IncrementVoltageLevel (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Increments the output voltage by the step size set for the output channel\par
      specified.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel you want to enable or disable.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  "1"\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_init}
${\footnote CPX400_init}
K{\footnote CPX400_init}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_init
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_init (ViRsrc resourceName, ViBoolean IDQuery,\par
                        ViBoolean resetDevice, ViPSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function performs the following initialization actions:\par
      \par
      - Creates a new IVI instrument driver session.\par
      \par
      - Opens a session to the specified device using the interface and address\par
      you specify for the Resource Name parameter.\par
      \par
      - If the ID Query parameter is set to VI_TRUE, this function queries the\par
      instrument ID and checks that it is valid for this instrument driver.\par
      \par
      - If the Reset parameter is set to VI_TRUE, this function resets the\par
      instrument to a known state.\par
      \par
      - Sends initialization commands to set the instrument to the state\par
      necessary for the operation of the instrument driver.\par
      \par
      - Returns a ViSession handle that you use to identify the instrument in\par
      all subsequent instrument driver function calls.\par
      \par
      Note:  This function creates a new session each time you invoke it.\par
      Although you can open more than one IVI session for the same resource, it\par
      is best not to do so.  You can use the same session in multiple program\par
      threads.  You can use the CPX400_LockSession and CPX400_UnlockSession\par
      functions to protect sections of code that require exclusive access to the\par
      resource.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      resourceName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViRsrc\par
\par
          Pass the resource name of the device to initialize.\par
          \par
          You can also pass the name of a virtual instrument or logical name\par
          that you configure with the IVI Configuration utility.  The virtual\par
          instrument identifies a specific device and specifies the initial\par
          settings for the session.  A logical Name identifies a particular\par
          virtual instrument.\par
          \par
          Refer to the following table below for the exact grammar to use for\par
          this parameter.  Optional fields are shown in square brackets ([]).\par
          \par
          Syntax\par
          ------------------------------------------------------\par
          GPIB[board]::<primary address>[::secondary address]::INSTR\par
          VXI[board]::<logical address>::INSTR\par
          GPIB-VXI[board]::<logical address>::INSTR\par
          ASRL<port>::INSTR\par
          <LogicalName>\par
          [VInstr->]<VirtualInstrument>\par
          \par
          If you do not specify a value for an optional field, the following\par
          values are used:\par
          \par
          Optional Field - Value\par
          ------------------------------------------------------\par
          board - 0\par
          secondary address - none (31)\par
          \par
          The following table contains example valid values for this parameter.\par
          \par
          "Valid Value" - Description\par
          ------------------------------------------------------\par
          "GPIB::22::INSTR" - GPIB board 0, primary address 22 no\par
                              secondary address\par
          "GPIB::22::5::INSTR" - GPIB board 0, primary address 22\par
                                 secondary address 5\par
          "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22\par
                                  secondary address 5\par
          "VXI::64::INSTR" - VXI board 0, logical address 64\par
          "VXI1::64::INSTR" - VXI board 1, logical address 64\par
          "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64\par
          "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64\par
          "ASRL2::INSTR" - COM port 2\par
          "SampleInstr" - Logical name "SampleInstr"\par
          "VInstr->xyz432" - Virtual Instrument "xyz432"\par
          "xyz432" - Logical Name or Virtual Instrument "xyz432"\par
          \par
          Default Value:  "ASRL1::INSTR"\par
          \par
          Note: You specify the resource name with the "VInstr->" if you have\par
          the logical name that is the same as the virtual instrument name and\par
          you want to explicitly use the virtual instrument name. Otherwise, the\par
          driver uses the logical name.\par
\plain\f1\fs20\keep\b
\par
      IDQuery\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Specify whether you want the instrument driver to perform an ID Query.\par
          \par
          Valid Range:\par
          VI_TRUE  (1) - Perform ID Query (Default Value)\par
          VI_FALSE (0) - Skip ID Query\par
          \par
          When you set this parameter to VI_TRUE, the driver verifies that the\par
          instrument you initialize is a type that this driver supports.\par
          \par
          Circumstances can arise where it is undesirable to send an ID Query\par
          command string to the instrument.  When you set this parameter to\par
          VI_FALSE, the function initializes the instrument without performing\par
          an ID Query.\par
\plain\f1\fs20\keep\b
\par
      resetDevice\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Specify whether you want the to reset the instrument during the\par
          initialization procedure.\par
          \par
          Valid Range:\par
          VI_TRUE  (1) - Reset Device (Default Value)\par
          VI_FALSE (0) - Don't Reset\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession (passed by reference)\par
\par
          Returns a ViSession handle that you use to identify the instrument in\par
          all subsequent instrument driver function calls.\par
          \par
          Notes:\par
          \par
          (1) This function creates a new session each time you invoke it.  This\par
          is useful if you have multiple physical instances of the same type of\par
          instrument.\par
          \par
          (2) Avoid creating multiple concurrent sessions to the same physical\par
          instrument.  Although you can create more than one IVI session for the\par
          same resource, it is best not to do so.  A better approach is to use\par
          the same IVI session in multiple execution threads.  You can use\par
          functions CPX400_LockSession and CPX400_UnlockSession to protect\par
          sections of code that require exclusive access to the resource.\par
          \par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_InitWithOptions}
${\footnote CPX400_InitWithOptions}
K{\footnote CPX400_InitWithOptions}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_InitWithOptions
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_InitWithOptions (ViRsrc resourceName, ViBoolean IDQuery,\par
                                   ViBoolean resetDevice,\par
                                   ViString optionString,\par
                                   ViPSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function performs the following initialization actions:\par
      \par
      - Creates a new IVI instrument driver and optionally sets the initial\par
      state of the following session attributes:\par
      \par
          CPX400_ATTR_RANGE_CHECK\par
          CPX400_ATTR_QUERY_INSTR_STATUS\par
          CPX400_ATTR_CACHE\par
          CPX400_ATTR_SIMULATE\par
          CPX400_ATTR_RECORD_COERCIONS\par
      \par
      - Opens a session to the specified device using the interface and address\par
      you specify for the Resource Name parameter.\par
      \par
      - If the ID Query parameter is set to VI_TRUE, this function queries the\par
      instrument ID and checks that it is valid for this instrument driver.\par
      \par
      - If the Reset parameter is set to VI_TRUE, this function resets the\par
      instrument to a known state.\par
      \par
      - Sends initialization commands to set the instrument to the state\par
      necessary for the operation of the instrument driver.\par
      \par
      - Returns a ViSession handle that you use to identify the instrument in\par
      all subsequent instrument driver function calls.\par
      \par
      Note:  This function creates a new session each time you invoke it.\par
      Although you can open more than one IVI session for the same resource, it\par
      is best not to do so.  You can use the same session in multiple program\par
      threads.  You can use the CPX400_LockSession and CPX400_UnlockSession\par
      functions to protect sections of code that require exclusive access to the\par
      resource.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      resourceName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViRsrc\par
\par
          Pass the resource name of the device to initialize.\par
          \par
          You can also pass the name of a virtual instrument or logical name\par
          that you configure with the IVI Configuration utility.  The virtual\par
          instrument identifies a specific device and specifies the initial\par
          settings for the session.  A logical Name identifies a particular\par
          virtual instrument.\par
          \par
          Refer to the following table below for the exact grammar to use for\par
          this parameter.  Optional fields are shown in square brackets ([]).\par
          \par
          Syntax\par
          ------------------------------------------------------\par
          GPIB[board]::<primary address>[::secondary address]::INSTR\par
          VXI[board]::<logical address>::INSTR\par
          GPIB-VXI[board]::<logical address>::INSTR\par
          ASRL<port>::INSTR\par
          <LogicalName>\par
          [VInstr->]<VirtualInstrument>\par
          \par
          If you do not specify a value for an optional field, the following\par
          values are used:\par
          \par
          Optional Field - Value\par
          ------------------------------------------------------\par
          board - 0\par
          secondary address - none (31)\par
          \par
          The following table contains example valid values for this parameter.\par
          \par
          "Valid Value" - Description\par
          ------------------------------------------------------\par
          "GPIB::22::INSTR" - GPIB board 0, primary address 22 no\par
                              secondary address\par
          "GPIB::22::5::INSTR" - GPIB board 0, primary address 22\par
                                 secondary address 5\par
          "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22\par
                                  secondary address 5\par
          "VXI::64::INSTR" - VXI board 0, logical address 64\par
          "VXI1::64::INSTR" - VXI board 1, logical address 64\par
          "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64\par
          "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64\par
          "ASRL2::INSTR" - COM port 2\par
          "SampleInstr" - Logical name "SampleInstr"\par
          "VInstr->xyz432" - Virtual Instrument "xyz432"\par
          "xyz432" - Logical Name or Virtual Instrument "xyz432"\par
          \par
          Default Value:  "ASRL1::INSTR"\par
          \par
          Note: You specify the resource name with the "VInstr->" if you have\par
          the logical name that is the same as the virtual instrument name and\par
          you want to explicitly use the virtual instrument name. Otherwise, the\par
          driver uses the logical name.\par
\plain\f1\fs20\keep\b
\par
      IDQuery\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Specify whether you want the instrument driver to perform an ID Query.\par
          \par
          Valid Range:\par
          VI_TRUE  (1) - Perform ID Query (Default Value)\par
          VI_FALSE (0) - Skip ID Query\par
          \par
          When you set this parameter to VI_TRUE, the driver verifies that the\par
          instrument you initialize is a type that this driver supports.\par
          \par
          Circumstances can arise where it is undesirable to send an ID Query\par
          command string to the instrument.  When you set this parameter to\par
          VI_FALSE, the function initializes the instrument without performing\par
          an ID Query.\par
\plain\f1\fs20\keep\b
\par
      resetDevice\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Specify whether you want the to reset the instrument during the\par
          initialization procedure.\par
          \par
          Valid Range:\par
          VI_TRUE  (1) - Reset Device (Default Value)\par
          VI_FALSE (0) - Don't Reset\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      optionString\par
\plain\f1\fs18\keep
\par
          Variable Type       ViString\par
\par
          You can use this control to set the initial value of certain\par
          attributes for the session.  The following table lists the attributes\par
          and the name you use in this parameter to identify the attribute.\par
          \par
          Name              Attribute Defined Constant\par
          --------------------------------------------\par
          RangeCheck        CPX400_ATTR_RANGE_CHECK\par
          QueryInstrStatus  CPX400_ATTR_QUERY_INSTR_STATUS\par
          Cache             CPX400_ATTR_CACHE\par
          Simulate          CPX400_ATTR_SIMULATE\par
          RecordCoercions   CPX400_ATTR_RECORD_COERCIONS\par
          \par
          The format of this string is, "AttributeName=Value" where\par
          AttributeName is the name of the attribute and Value is the value to\par
          which the attribute will be set.  To set multiple attributes, separate\par
          their assignments with a comma.\par
          \par
          If you pass NULL or an empty string for this parameter and a VISA\par
          resource descriptor for the Resource Name parameter, the session uses\par
          the default values for the attributes. The default values for the\par
          attributes are shown below:\par
          \par
              Attribute Name     Default Value\par
              ----------------   -------------\par
              RangeCheck         VI_TRUE\par
              QueryInstrStatus   VI_TRUE\par
              Cache              VI_TRUE\par
              Simulate           VI_FALSE\par
              RecordCoercions    VI_FALSE\par
          \par
          \par
          If you pass NULL or an empty string for this parameter and a virtual\par
          instrument or logical name for the Resource Name parameter, the\par
          session uses the values that you configure for virtual instrument or\par
          logical name with the IVI Configuration utility.\par
          \par
          You can override the values of the attributes by assigning a value\par
          explicitly in a string you pass for this parameter.  You do not have\par
          to specify all of the attributes and may leave any of them out.  If\par
          you do not specify one of the attributes, its default value or the\par
          value that you configure with the IVI Configuration utility will be\par
          used.\par
          \par
          The following are the valid values for ViBoolean attributes:\par
          \par
              True:     1, TRUE, or VI_TRUE\par
              False:    0, False, or VI_FALSE\par
          \par
          \par
          Default Value:\par
          "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1"\par
          \par
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession (passed by reference)\par
\par
          Returns a ViSession handle that you use to identify the instrument in\par
          all subsequent instrument driver function calls.\par
          \par
          Notes:\par
          \par
          (1) This function creates a new session each time you invoke it.  This\par
          is useful if you have multiple physical instances of the same type of\par
          instrument.\par
          \par
          (2) Avoid creating multiple concurrent sessions to the same physical\par
          instrument.  Although you can create more than one IVI session for the\par
          same resource, it is best not to do so.  A better approach is to use\par
          the same IVI session in multiple execution threads.  You can use\par
          functions CPX400_LockSession and CPX400_UnlockSession to protect\par
          sections of code that require exclusive access to the resource.\par
          \par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_InvalidateAllAttributes}
${\footnote CPX400_InvalidateAllAttributes}
K{\footnote CPX400_InvalidateAllAttributes}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_InvalidateAllAttributes
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_InvalidateAllAttributes (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function invalidates the cached values of all attributes for the\par
      session.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This driver defines the following status codes:\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_Local}
${\footnote CPX400_Local}
K{\footnote CPX400_Local}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_Local
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_Local (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Switch the instrument to local mode.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_LockSession}
${\footnote CPX400_LockSession}
K{\footnote CPX400_LockSession}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_LockSession
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_LockSession (ViSession instrumentHandle,\par
                               ViPBoolean callerHasLock);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function obtains a multithread lock on the instrument session.\par
      Before it does so, it waits until all other execution threads have\par
      released their locks on the instrument session.\par
      \par
      Other threads might have obtained a lock on this session in the following\par
      ways:\par
      \par
      - The user's application called CPX400_LockSession.\par
      \par
      - A call to the instrument driver locked the session.\par
      \par
      - A call to the IVI engine locked the session.\par
      \par
      After your call to CPX400_LockSession returns successfully, no other\par
      threads can access the instrument session until you call\par
      CPX400_UnlockSession.\par
      \par
      Use CPX400_LockSession and CPX400_UnlockSession around a sequence of calls\par
      to instrument driver functions if you require that the instrument retain\par
      its settings through the end of the sequence.\par
      \par
      You can safely make nested calls to CPX400_LockSession within the same\par
      thread.  To completely unlock the session, you must balance each call to\par
      CPX400_LockSession with a call to CPX400_UnlockSession.  If, however, you\par
      use the Caller Has Lock parameter in all calls to CPX400_LockSession and\par
      CPX400_UnlockSession within a function, the IVI Library locks the session\par
      only once within the function regardless of the number of calls you make\par
      to CPX400_LockSession.  This allows you to call CPX400_UnlockSession just\par
      once at the end of the function.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      callerHasLock\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean (passed by reference)\par
\par
          This parameter serves as a convenience.  If you do not want to use\par
          this parameter, pass VI_NULL.\par
          \par
          Use this parameter in complex functions to keep track of whether you\par
          obtain a lock and therefore need to unlock the session.  Pass the\par
          address of a local ViBoolean variable.  In the declaration of the\par
          local variable, initialize it to VI_FALSE.  Pass the address of the\par
          same local variable to any other calls you make to CPX400_LockSession\par
          or CPX400_UnlockSession in the same function.\par
          \par
          The parameter is an input/output parameter.  CPX400_LockSession and\par
          CPX400_UnlockSession each inspect the current value and take the\par
          following actions:\par
          \par
          - If the value is VI_TRUE, CPX400_LockSession does not lock the\par
          session again.  If the value is VI_FALSE, CPX400_LockSession obtains\par
          the lock and sets the value of the parameter to VI_TRUE.\par
          \par
          - If the value is VI_FALSE, CPX400_UnlockSession does not attempt to\par
          unlock the session.  If the value is VI_TRUE, CPX400_UnlockSession\par
          releases the lock and sets the value of the parameter to VI_FALSE.\par
          \par
          Thus, you can, call CPX400_UnlockSession at the end of your function\par
          without worrying about whether you actually have the lock.\par
          \par
          Example:\par
          \par
          ViStatus TestFunc (ViSession vi, ViInt32 flags)\par
          \{\par
              ViStatus error = VI_SUCCESS;\par
              ViBoolean haveLock = VI_FALSE;\par
          \par
              if (flags & BIT_1)\par
                  \{\par
                  viCheckErr( CPX400_LockSession(vi, &haveLock));\par
                  viCheckErr( TakeAction1(vi));\par
                  if (flags & BIT_2)\par
                      \{\par
                      viCheckErr( CPX400_UnlockSession(vi, &haveLock));\par
                      viCheckErr( TakeAction2(vi));\par
                      viCheckErr( CPX400_LockSession(vi, &haveLock);\par
                      \}\par
                  if (flags & BIT_3)\par
                      viCheckErr( TakeAction3(vi));\par
                  \}\par
          \par
          Error:\par
              /*\par
                 At this point, you cannot really be sure that\par
                 you have the lock.  Fortunately, the haveLock\par
                 variable takes care of that for you.\par
              */\par
              CPX400_UnlockSession(vi, &haveLock);\par
              return error;\par
          \}\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_Measure}
${\footnote CPX400_Measure}
K{\footnote CPX400_Measure}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_Measure
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_Measure (ViSession instrumentHandle,\par
                           ViChar _VI_FAR channelName[],\par
                           ViInt32 measurementType, ViPReal64 measurement);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function takes a measurement on the output signal and returns the\par
      measured value.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to take a measurement.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      measurementType\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the measurement you want the power supply to take.\par
          \par
          Valid Values:\par
          CPX400_VAL_MEASURE_VOLTAGE - DC voltage measurement\par
          CPX400_VAL_MEASURE_CURRENT - DC current measurement\par
          \par
          Default Value: CPX400_VAL_MEASURE_VOLTAGE\par
\plain\f1\fs20\keep\b
\par
      measurement\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64 (passed by reference)\par
\par
          Returns the measured value.\par
          \par
          Units: volts (for voltage measurement)\par
                 amps  (for current measurement)\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_QueryMaxCurrentLimit}
${\footnote CPX400_QueryMaxCurrentLimit}
K{\footnote CPX400_QueryMaxCurrentLimit}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_QueryMaxCurrentLimit
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_QueryMaxCurrentLimit (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViReal64 voltageLevel,\par
                                        ViPReal64 maxCurrentLimit);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the maximum programmable current limit that the\par
      power supply accepts for a particular voltage level on a channel.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to query for the maximum\par
          programmable current limit.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      voltageLevel\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the voltage level for which to determine the maximum programmable\par
          current limit.\par
          \par
          Units: volts (V).\par
          \par
          Valid Range:  depends on model, see instruction manual\par
          \par
          Default Value: 0.0\par
          \par
\plain\f1\fs20\keep\b
\par
      maxCurrentLimit\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64 (passed by reference)\par
\par
          This parameter returns the maximum programmable current limit for the\par
          voltage level you specify.\par
          \par
          Units: amps (A)\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_QueryMaxVoltageLevel}
${\footnote CPX400_QueryMaxVoltageLevel}
K{\footnote CPX400_QueryMaxVoltageLevel}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_QueryMaxVoltageLevel
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_QueryMaxVoltageLevel (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViReal64 currentLimit,\par
                                        ViPReal64 maxVoltageLevel);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the maximum programmable voltage level that the\par
      power supply accepts for a particular current limit on a channel.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to query for the maximum\par
          programmable voltage level.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      currentLimit\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the current limit for which to determine the maximum programmable\par
          voltage level.\par
          \par
          Units: amps (A).\par
          \par
          Valid Range:  depends on model, see instruction manual\par
          \par
          Default Value: 0.0\par
          \par
\plain\f1\fs20\keep\b
\par
      maxVoltageLevel\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64 (passed by reference)\par
\par
          This parameter returns the maximum programmable voltage level for the\par
          current limit you specify.\par
          \par
          Units: volts (V)\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_QueryOutputState}
${\footnote CPX400_QueryOutputState}
K{\footnote CPX400_QueryOutputState}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_QueryOutputState
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_QueryOutputState (ViSession instrumentHandle,\par
                                    ViChar _VI_FAR channelName[],\par
                                    ViInt32 outputState, ViPBoolean inState);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns whether the power supply is in a particular output\par
      state.\par
      \par
      This power supply can't report this automatically so this function always\par
      returns FALSE for any parameter. To help the operator derive this\par
      themselves the following has been provided:\par
      \par
      A constant voltage condition occurs when the output voltage is equal to\par
      the value of the CPX400_ATTR_VOLTAGE_LEVEL attribute and the current is\par
      less than or equal to the value of the CPX400_ATTR_CURRENT_LIMIT\par
      attribute.\par
      \par
      A constant current condition occurs when the output current is equal to\par
      the value of the CPX400_ATTR_CURRENT_LIMIT attribute and the\par
      CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR attribute is set to\par
      CPX400_VAL_CURRENT_REGULATE.\par
      \par
      An unregulated condition occurs when the output voltage is less than the\par
      value of the CPX400_ATTR_VOLTAGE_LEVEL attribute and the current is less\par
      than the value of the CPX400_ATTR_CURRENT_LIMIT attribute.\par
      \par
      An over-voltage condition occurs when the output voltage is equal to or\par
      greater than the value of the CPX400_ATTR_OVP_LIMIT attribute and the\par
      CPX400_ATTR_OVP_ENABLED attribute is set to VI_TRUE.\par
      \par
      An over-current condition occurs when the output current is equal to or\par
      greater than the value of the CPX400_ATTR_CURRENT_LIMIT attribute and the\par
      CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR attribute is set to\par
      CPX400_VAL_CURRENT_TRIP.\par
      \par
      When either an over-voltage condition or an over-current condition occurs,\par
      the power supply's output protection disables the output.  If the power\par
      supply is in an over-voltage or over-current state, it does not produce\par
      power until the output protection is reset.  The\par
      CPX400_ResetOutputProtection function resets the output protection.  Once\par
      the output protection is reset, the power supply resumes generating a\par
      power signal.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to query for an output state.\par
          \par
          Valid Channel Names:  1\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      outputState\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the output state for which you want to query.\par
          \par
          Valid Values:\par
          CPX400_VAL_OUTPUT_CONSTANT_VOLTAGE - Constant Voltage State\par
          \par
          CPX400_VAL_OUTPUT_CONSTANT_CURRENT - Constant Current State\par
          \par
          CPX400_VAL_OUTPUT_UNREGULATED - Unregulated State\par
          \par
          CPX400_VAL_OUTPUT_OVER_VOLTAGE - Over-voltage State\par
          \par
          CPX400_VAL_OUTPUT_OVER_CURRENT - Over-current State\par
          \par
          \par
          Default Value:\par
          CPX400_VAL_OUTPUT_CONSTANT_VOLTAGE\par
          \par
\plain\f1\fs20\keep\b
\par
      inState\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean (passed by reference)\par
\par
          This parameter returns VI_TRUE if the power supply is currently in the\par
          state you specify with the outputState parameter, and VI_FALSE if it\par
          is not.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ReadInstrData}
${\footnote CPX400_ReadInstrData}
K{\footnote CPX400_ReadInstrData}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ReadInstrData
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ReadInstrData (ViSession instrumentHandle,\par
                                 ViInt32 number_ofBytesToRead,\par
                                 ViChar _VI_FAR readBuffer[],\par
                                 ViPInt32 numBytesRead);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function reads data from the instrument.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      number_ofBytesToRead\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the maximum number of bytes to read from the instruments.\par
          \par
          Valid Range:  0 to the number of elements in the Read Buffer.\par
          \par
          Default Value:  0\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      readBuffer\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          After this function executes, this parameter contains the data that\par
          was read from the instrument.\par
\plain\f1\fs20\keep\b
\par
      numBytesRead\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32 (passed by reference)\par
\par
          Returns the number of bytes actually read from the instrument and\par
          stored in the Read Buffer.\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_RecallSetup}
${\footnote CPX400_RecallSetup}
K{\footnote CPX400_RecallSetup}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_RecallSetup
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_RecallSetup (ViSession instrumentHandle,\par
                               ViChar _VI_FAR channelName[], ViInt32 store);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Recall a set up for the channel selected from the set-up store specified\par
      which can be 0-9.\par
      \par
      If the instrument is operating in linked mode then the entire instrument\par
      set-up will be recalled from the linked mode set-up store specified. The\par
      channel specification is ignored.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to configure the voltage level.\par
          \par
          Valid Channel Names:  1,2\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      store\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the store you want to use.\par
          \par
          Default Value: 0\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_reset}
${\footnote CPX400_reset}
K{\footnote CPX400_reset}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_reset
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_reset (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function resets the instrument to a known state and sends\par
      initialization commands to the instrument.  The initialization commands\par
      set instrument settings to the state necessary for the operation of the\par
      instrument driver.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ResetInterchangeCheck}
${\footnote CPX400_ResetInterchangeCheck}
K{\footnote CPX400_ResetInterchangeCheck}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ResetInterchangeCheck
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ResetInterchangeCheck (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      When developing a complex test system that consists of multiple test\par
      modules, it is generally a good idea to design the test modules so that\par
      they can run in any order.  To do so requires ensuring that each test\par
      module completely configures the state of each instrument it uses.  If a\par
      particular test module does not completely configure the state of an\par
      instrument, the state of the instrument depends on the configuration from\par
      a previously executed test module.  If you execute the test modules in a\par
      different order, the behavior of the instrument and therefore the entire\par
      test module is likely to change.  This change in behavior is generally\par
      instrument specific and represents an interchangeability problem.\par
      \par
      You can use this function to test for such cases.  After you call this\par
      function, the interchangeability checking algorithms in the specific\par
      driver ignore all previous configuration operations.  By calling this\par
      function at the beginning of a test module, you can determine whether the\par
      test module has dependencies on the operation of previously executed test\par
      modules.\par
      \par
      This function does not clear the interchangeability warnings from the list\par
      of previously recorded interchangeability warnings.  If you want to\par
      guarantee that the CPX400_GetNextInterchangeWarning function only returns\par
      those interchangeability warnings that are generated after calling this\par
      function, you must clear the list of interchangeability warnings.  You can\par
      clear the interchangeability warnings list by repeatedly calling the\par
      CPX400_GetNextInterchangeWarning function until no more interchangeability\par
      warnings are returned.  If you are not interested in the content of those\par
      warnings, you can call the CPX400_ClearInterchangeWarnings function.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ResetOutputProtection}
${\footnote CPX400_ResetOutputProtection}
K{\footnote CPX400_ResetOutputProtection}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ResetOutputProtection
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ResetOutputProtection (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function resets the power supply's output protection after an\par
      over-voltage or over-current.\par
      \par
      An over-voltage condition occurs when the output voltage is equal to or\par
      greater than the value of the CPX400_ATTR_OVP_LIMIT attribute.\par
      \par
      An over-current condition occurs when the output current is equal to or\par
      greater than the value of the CPX400_ATTR_CURRENT_LIMIT attribute.\par
      \par
      When either an over-voltage condition or an over-current condition occurs,\par
      the output protection of the power supply disables the output.  Once the\par
      output protection is reset, the power supply resumes generating a power\par
      signal.\par
      \par
      You use the CPX400_QueryOutputState function to determine if the power\par
      supply is in an output-protection state.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to query for the maximum\par
          programmable current limit.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_ResetWithDefaults}
${\footnote CPX400_ResetWithDefaults}
K{\footnote CPX400_ResetWithDefaults}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ResetWithDefaults
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_ResetWithDefaults (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function resets the instrument and applies initial user specified\par
      settings from the Logical Name which was used to initialize the session.\par
      If the session was created without a Logical Name, this function is\par
      equivalent to the CPX400_reset function.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetError function.  To clear the\par
          error information from the driver, call the CPX400_ClearError\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviDCPwr Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviDCPwr Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_revision_query}
${\footnote CPX400_revision_query}
K{\footnote CPX400_revision_query}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_revision_query
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_revision_query (ViSession instrumentHandle,\par
                                  ViChar _VI_FAR instrumentDriverRevision[],\par
                                  ViChar _VI_FAR firmwareRevision[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function returns the revision numbers of the instrument driver and\par
      instrument firmware.\par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      instrumentDriverRevision\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the instrument driver software revision numbers in the form of\par
          a string.\par
          \par
          You must pass a ViChar array with at least 256 bytes.\par
\plain\f1\fs20\keep\b
\par
      firmwareRevision\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the instrument firmware revision numbers in the form of a\par
          string.\par
          \par
          You must pass a ViChar array with at least 256 bytes.\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_SaveSetup}
${\footnote CPX400_SaveSetup}
K{\footnote CPX400_SaveSetup}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_SaveSetup
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_SaveSetup (ViSession instrumentHandle,\par
                             ViChar _VI_FAR channelName[], ViInt32 store);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Saves the current set-up of channel requested to the set-up store\par
      specified which can be 0-9.\par
      \par
      If the instrument is operating in linked mode then the entire instrument\par
      set-up will be stored in the linked mode set-up store specified. The\par
      channel specification is ignored. This has no affect on the individual\par
      channel set-up stores available when not in linked mode\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the name of the channel on which to configure the voltage level.\par
          \par
          Valid Channel Names:  1,2\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      store\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the store you want to use.\par
          \par
          Default Value: 0\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_self_test}
${\footnote CPX400_self_test}
K{\footnote CPX400_self_test}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_self_test
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_self_test (ViSession instrumentHandle,\par
                             ViPInt16 selfTestResult,\par
                             ViChar _VI_FAR selfTestMessage[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function runs the instrument's self test routine and returns the test\par
      result(s).\par
      \par
      The PSU has no self test capability and the response is always 0\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      selfTestResult\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt16 (passed by reference)\par
\par
          This control contains the value returned from the instrument self\par
          test.  Zero means success.  For any other code, see the device's\par
          operator's manual.\par
          \par
          The PSU has no self test capability and the response is always 0\par
          \par
          Self-Test Code    Description\par
          ---------------------------------------\par
             0              Passed self test\par
             1              Self test failed\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      selfTestMessage\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Returns the self-test response string from the instrument. See the\par
          device's operation manual for an explanation of the string's contents.\par
          \par
          You must pass a ViChar array with at least 256 bytes.\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_SetAttributeViBoolean}
${\footnote CPX400_SetAttributeViBoolean}
K{\footnote CPX400_SetAttributeViBoolean}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_SetAttributeViBoolean
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_SetAttributeViBoolean (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViAttr attributeID,\par
                                         ViBoolean attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function sets the value of a ViBoolean attribute.\par
      \par
      This is a low-level function that you can use to set the values of\par
      instrument-specific attributes and inherent IVI attributes.  If the\par
      attribute represents an instrument state, this function performs\par
      instrument I/O in the following cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid or is\par
      different than the value you specify.\par
      \par
      This instrument driver contains high-level functions that set most of the\par
      instrument attributes.  It is best to use the high-level driver functions\par
      as much as possible.  They handle order dependencies and multithread\par
      locking for you.  In addition, they perform status checking only after\par
      setting all of the attributes.  In contrast, when you set multiple\par
      attributes using the SetAttribute functions, the functions check the\par
      instrument status after each call.\par
      \par
      Also, when state caching is enabled, the high-level functions that\par
      configure multiple attributes perform instrument I/O only for the\par
      attributes whose value you change.  Thus, you can safely call the\par
      high-level functions without the penalty of redundant instrument I/O.\par
      \par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to set the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViBoolean\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViBoolean are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean\par
\par
          Pass the value to which you want to set the attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_SetAttributeViInt32}
${\footnote CPX400_SetAttributeViInt32}
K{\footnote CPX400_SetAttributeViInt32}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_SetAttributeViInt32
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_SetAttributeViInt32 (ViSession instrumentHandle,\par
                                       ViChar _VI_FAR channelName[],\par
                                       ViAttr attributeID,\par
                                       ViInt32 attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function sets the value of a ViInt32 attribute.\par
      \par
      This is a low-level function that you can use to set the values of\par
      instrument-specific attributes and inherent IVI attributes.  If the\par
      attribute represents an instrument state, this function performs\par
      instrument I/O in the following cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid or is\par
      different than the value you specify.\par
      \par
      This instrument driver contains high-level functions that set most of the\par
      instrument attributes.  It is best to use the high-level driver functions\par
      as much as possible.  They handle order dependencies and multithread\par
      locking for you.  In addition, they perform status checking only after\par
      setting all of the attributes.  In contrast, when you set multiple\par
      attributes using the SetAttribute functions, the functions check the\par
      instrument status after each call.\par
      \par
      Also, when state caching is enabled, the high-level functions that\par
      configure multiple attributes perform instrument I/O only for the\par
      attributes whose value you change.  Thus, you can safely call the\par
      high-level functions without the penalty of redundant instrument I/O.\par
      \par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to set the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViInt32 type.\par
            If you choose to see all IVI attributes, the data types appear\par
            to the right of the attribute names in the list box.\par
            Attributes with data types other than ViInt32 are dim.  If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViInt32\par
\par
          Pass the value to which you want to set the attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_SetAttributeViReal64}
${\footnote CPX400_SetAttributeViReal64}
K{\footnote CPX400_SetAttributeViReal64}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_SetAttributeViReal64
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_SetAttributeViReal64 (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViAttr attributeID,\par
                                        ViReal64 attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function sets the value of a ViReal64 attribute.\par
      \par
      This is a low-level function that you can use to set the values of\par
      instrument-specific attributes and inherent IVI attributes.  If the\par
      attribute represents an instrument state, this function performs\par
      instrument I/O in the following cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid or is\par
      different than the value you specify.\par
      \par
      This instrument driver contains high-level functions that set most of the\par
      instrument attributes.  It is best to use the high-level driver functions\par
      as much as possible.  They handle order dependencies and multithread\par
      locking for you.  In addition, they perform status checking only after\par
      setting all of the attributes.  In contrast, when you set multiple\par
      attributes using the SetAttribute functions, the functions check the\par
      instrument status after each call.\par
      \par
      Also, when state caching is enabled, the high-level functions that\par
      configure multiple attributes perform instrument I/O only for the\par
      attributes whose value you change.  Thus, you can safely call the\par
      high-level functions without the penalty of redundant instrument I/O.\par
      \par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to set the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViReal64\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViReal64 are dim.  If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViReal64\par
\par
          Pass the value to which you want to set the attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_SetAttributeViSession}
${\footnote CPX400_SetAttributeViSession}
K{\footnote CPX400_SetAttributeViSession}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_SetAttributeViSession
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_SetAttributeViSession (ViSession instrumentHandle,\par
                                         ViChar _VI_FAR channelName[],\par
                                         ViAttr attributeID,\par
                                         ViSession attributeValue);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function sets the value of a ViSession attribute.\par
      \par
      This is a low-level function that you can use to set the values of\par
      instrument-specific attributes and inherent IVI attributes.  If the\par
      attribute represents an instrument state, this function performs\par
      instrument I/O in the following cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid or is\par
      different than the value you specify.\par
      \par
      This instrument driver contains high-level functions that set most of the\par
      instrument attributes.  It is best to use the high-level driver functions\par
      as much as possible.  They handle order dependencies and multithread\par
      locking for you.  In addition, they perform status checking only after\par
      setting all of the attributes.  In contrast, when you set multiple\par
      attributes using the SetAttribute functions, the functions check the\par
      instrument status after each call.\par
      \par
      Also, when state caching is enabled, the high-level functions that\par
      configure multiple attributes perform instrument I/O only for the\par
      attributes whose value you change.  Thus, you can safely call the\par
      high-level functions without the penalty of redundant instrument I/O.\par
      \par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to set the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViSession\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViSession are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          Pass the value to which you want to set the attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_SetAttributeViString}
${\footnote CPX400_SetAttributeViString}
K{\footnote CPX400_SetAttributeViString}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_SetAttributeViString
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_SetAttributeViString (ViSession instrumentHandle,\par
                                        ViChar _VI_FAR channelName[],\par
                                        ViAttr attributeID,\par
                                        ViChar _VI_FAR attributeValue[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function sets the value of a ViString attribute.\par
      \par
      This is a low-level function that you can use to set the values of\par
      instrument-specific attributes and inherent IVI attributes.  If the\par
      attribute represents an instrument state, this function performs\par
      instrument I/O in the following cases:\par
      \par
      - State caching is disabled for the entire session or for the particular\par
      attribute.\par
      \par
      - State caching is enabled and the currently cached value is invalid or is\par
      different than the value you specify.\par
      \par
      This instrument driver contains high-level functions that set most of the\par
      instrument attributes.  It is best to use the high-level driver functions\par
      as much as possible.  They handle order dependencies and multithread\par
      locking for you.  In addition, they perform status checking only after\par
      setting all of the attributes.  In contrast, when you set multiple\par
      attributes using the SetAttribute functions, the functions check the\par
      instrument status after each call.\par
      \par
      Also, when state caching is enabled, the high-level functions that\par
      configure multiple attributes perform instrument I/O only for the\par
      attributes whose value you change.  Thus, you can safely call the\par
      high-level functions without the penalty of redundant instrument I/O.\par
      \par
      \par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      channelName\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          If the attribute is channel-based, this parameter specifies the name\par
          of the channel on which to set the value of the attribute. If the\par
          attribute is not channel-based, then pass VI_NULL or an empty string.\par
          \par
          Valid Channel Names:  depends on model, see instruction manual\par
          \par
          Default Value:  ""\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeID\par
\plain\f1\fs18\keep
\par
          Variable Type       ViAttr\par
\par
          {\uldb Attribute List}{\v WinHelp_CPX400_SetAttributeViInt32_AttributeList}\par\par \par
          Pass the ID of an attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - Click on the control or press <ENTER>, <spacebar>, or\par
            <ctrl-down arrow>, to display a dialog box containing a\par
            hierarchical list of the available attributes.  Attributes\par
            whose value cannot be set are dim.  Help text is shown for\par
            each attribute.  Select an attribute by double-clicking on it\par
            or by selecting it and then pressing <ENTER>.\par
          \par
            Read-only attributes appear dim in the list box.  If you\par
            select a read-only attribute, an error message appears.\par
          \par
            A ring control at the top of the dialog box allows you to see\par
            all IVI attributes or only the attributes of the ViString\par
            type.  If you choose to see all IVI attributes, the data types\par
            appear to the right of the attribute names in the list box.\par
            Attributes with data types other than ViString are dim. If\par
            you select an attribute data type that is dim, LabWindows/CVI\par
            transfers you to the function panel for the corresponding\par
            function that is consistent with the data type.\par
          \par
          - If you want to enter a variable name, press <CTRL-T> to change\par
            this ring control to a manual input box.\par
          \par
          - If the attribute in this ring control has named constants as\par
            valid values, you can view the constants by moving to the\par
            Attribute Value control and pressing <ENTER>.\par
          \par
\plain\f1\fs20\keep\b
\par
      attributeValue\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the value to which you want to set the attribute.\par
          \par
          From the function panel window, you can use this control as follows.\par
          \par
          - If the attribute currently showing in the Attribute ID ring\par
            control has constants as valid values, you can view a list of\par
            the constants by pressing <ENTER> on this control.  Select a\par
            value by double-clicking on it or by selecting it and then\par
            pressing <ENTER>.\par
          \par
            Note:  Some of the values might not be valid depending on the\par
            current settings of the instrument session.\par
          \par
          Default Value: none\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_UnlockSession}
${\footnote CPX400_UnlockSession}
K{\footnote CPX400_UnlockSession}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_UnlockSession
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_UnlockSession (ViSession instrumentHandle,\par
                                 ViPBoolean callerHasLock);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function releases a lock that you acquired on an instrument session\par
      using CPX400_LockSession.  Refer to CPX400_LockSession for additional\par
      information on session locks.\par
      \par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      callerHasLock\par
\plain\f1\fs18\keep
\par
          Variable Type       ViBoolean (passed by reference)\par
\par
          This parameter serves as a convenience.  If you do not want to use\par
          this parameter, pass VI_NULL.\par
          \par
          Use this parameter in complex functions to keep track of whether you\par
          obtain a lock and therefore need to unlock the session.\par
          Pass the address of a local ViBoolean variable.  In the declaration of\par
          the local variable, initialize it to VI_FALSE.  Pass the address of\par
          the same local variable to any other calls you make to\par
          CPX400_LockSession or CPX400_UnlockSession in the same function.\par
          \par
          The parameter is an input/output parameter.  CPX400_LockSession and\par
          CPX400_UnlockSession each inspect the current value and take the\par
          following actions:\par
          \par
          - If the value is VI_TRUE, CPX400_LockSession does not lock the\par
          session again.  If the value is VI_FALSE, CPX400_LockSession obtains\par
          the lock and sets the value of the parameter to VI_TRUE.\par
          \par
          - If the value is VI_FALSE, CPX400_UnlockSession does not attempt to\par
          unlock the session.  If the value is VI_TRUE, CPX400_UnlockSession\par
          releases the lock and sets the value of the parameter to VI_FALSE.\par
          \par
          Thus, you can, call CPX400_UnlockSession at the end of your function\par
          without worrying about whether you actually have the lock.\par
          \par
          Example:\par
          \par
          ViStatus TestFunc (ViSession vi, ViInt32 flags)\par
          \{\par
              ViStatus error = VI_SUCCESS;\par
              ViBoolean haveLock = VI_FALSE;\par
          \par
              if (flags & BIT_1)\par
                  \{\par
                  viCheckErr( CPX400_LockSession(vi, &haveLock));\par
                  viCheckErr( TakeAction1(vi));\par
                  if (flags & BIT_2)\par
                      \{\par
                      viCheckErr( CPX400_UnlockSession(vi, &haveLock));\par
                      viCheckErr( TakeAction2(vi));\par
                      viCheckErr( CPX400_LockSession(vi, &haveLock);\par
                      \}\par
                  if (flags & BIT_3)\par
                      viCheckErr( TakeAction3(vi));\par
                  \}\par
          \par
          Error:\par
              /*\par
                 At this point, you cannot really be sure that\par
                 you have the lock.  Fortunately, the haveLock\par
                 variable takes care of that for you.\par
              */\par
              CPX400_UnlockSession(vi, &haveLock);\par
              return error;\par
          \}\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_WaitForOperationComplete}
${\footnote CPX400_WaitForOperationComplete}
K{\footnote CPX400_WaitForOperationComplete}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_WaitForOperationComplete
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_WaitForOperationComplete (ViSession instrumentHandle);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      Wait for Operation Complete true. As all commands are completely executed\par
      before the next is started this command takes no additional action.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page
#{\footnote WinHelp_CPX400_WriteInstrData}
${\footnote CPX400_WriteInstrData}
K{\footnote CPX400_WriteInstrData}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_WriteInstrData
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\f1\fs18\keep\par
  ViStatus CPX400_WriteInstrData (ViSession instrumentHandle,\par
                                  ViChar _VI_FAR writeBuffer[]);\par
\par \pard\plain\f0\fs24\b
Purpose
\plain\f1\fs18\keep
\par
      This function writes a user-specified string to the instrument.\par
      \par
      Note:  This function bypasses IVI attribute state caching.  Therefore,\par
      when you call this function, the cached values for all attributes will be\par
      invalidated.\par
\par \pard\plain\f0\fs24\b
Parameter List
\plain\f1\fs20\keep\b
\par
      instrumentHandle\par
\plain\f1\fs18\keep
\par
          Variable Type       ViSession\par
\par
          The ViSession handle that you obtain from the CPX400_init or\par
          CPX400_InitWithOptions function.  The handle identifies a particular\par
          instrument session.\par
          \par
          Default Value:  None\par
          \par
\plain\f1\fs20\keep\b
\par
      writeBuffer\par
\plain\f1\fs18\keep
\par
          Variable Type       ViChar[]\par
\par
          Pass the string to be written to the instrument.\par
\par \pard\plain\f0\fs24\b
Return Value
\plain\f1\fs18\keep
\par
          Returns the status code of this operation.  The status code  either\par
          indicates success or describes an error or warning condition.  You\par
          examine the status code from each call to an instrument driver\par
          function to determine if an error occurred.\par
          \par
          To obtain a text description of the status code, call the\par
          CPX400_error_message function.  To obtain additional information about\par
          the error condition, call the CPX400_GetErrorInfo function.  To clear\par
          the error information from the driver, call the CPX400_ClearErrorInfo\par
          function.\par
          \par
          The general meaning of the status code is as follows:\par
          \par
          Value                  Meaning\par
          -------------------------------\par
          0                      Success\par
          Positive Values        Warnings\par
          Negative Values        Errors\par
          \par
          This instrument driver also returns errors and warnings defined by\par
          other sources.  The following table defines the ranges of additional\par
          status codes that this driver can return.  The table lists the\par
          different include files that contain the defined constants for the\par
          particular status codes:\par
          \par
          Numeric Range (in Hex)   Status Code Types\par
          -------------------------------------------------\par
          3FFA2000 to 3FFA3FFF     IviPower Warnings\par
          3FFA0000 to 3FFA1FFF     IVI      Warnings\par
          3FFF0000 to 3FFFFFFF     VISA     Warnings\par
          3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings\par
          \par
          BFFA2000 to BFFA3FFF     IviPower Errors\par
          BFFA0000 to BFFA1FFF     IVI      Errors\par
          BFFF0000 to BFFFFFFF     VISA     Errors\par
          BFFC0000 to BFFCFFFF     VXIPnP Driver Errors\par
          \par
          \par
}\page

#{\footnote WinHelp_CPX400_SetAttributeViInt32_AttributeList}
${\footnote Attribute List}
K{\footnote Attribute List}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b Attribute List
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\keep\par
Attribute Information for the Following Functions:\par
\par
        {\cf2\uldb CPX400_SetAttributeViInt32}{\v %WinHelp_CPX400_SetAttributeViInt32}\par\cf0 
        {\cf2\uldb CPX400_GetAttributeViInt32}{\v %WinHelp_CPX400_GetAttributeViInt32}\par\cf0 
        {\cf2\uldb CPX400_CheckAttributeViInt32}{\v %WinHelp_CPX400_CheckAttributeViInt32}\par\cf0 
        {\cf2\uldb CPX400_SetAttributeViReal64}{\v %WinHelp_CPX400_SetAttributeViReal64}\par\cf0 
        {\cf2\uldb CPX400_GetAttributeViReal64}{\v %WinHelp_CPX400_GetAttributeViReal64}\par\cf0 
        {\cf2\uldb CPX400_CheckAttributeViReal64}{\v %WinHelp_CPX400_CheckAttributeViReal64}\par\cf0 
        {\cf2\uldb CPX400_SetAttributeViSession}{\v %WinHelp_CPX400_SetAttributeViSession}\par\cf0 
        {\cf2\uldb CPX400_GetAttributeViSession}{\v %WinHelp_CPX400_GetAttributeViSession}\par\cf0 
        {\cf2\uldb CPX400_CheckAttributeViSession}{\v %WinHelp_CPX400_CheckAttributeViSession}\par\cf0 
        {\cf2\uldb CPX400_SetAttributeViBoolean}{\v %WinHelp_CPX400_SetAttributeViBoolean}\par\cf0 
        {\cf2\uldb CPX400_GetAttributeViBoolean}{\v %WinHelp_CPX400_GetAttributeViBoolean}\par\cf0 
        {\cf2\uldb CPX400_CheckAttributeViBoolean}{\v %WinHelp_CPX400_CheckAttributeViBoolean}\par\cf0 
        {\cf2\uldb CPX400_SetAttributeViString}{\v %WinHelp_CPX400_SetAttributeViString}\par\cf0 
        {\cf2\uldb CPX400_GetAttributeViString}{\v %WinHelp_CPX400_GetAttributeViString}\par\cf0 
        {\cf2\uldb CPX400_CheckAttributeViString}{\v %WinHelp_CPX400_CheckAttributeViString}\par\cf0 
\par
   Inherent IVI Attributes\par
      User Options\par
         Range Check                              {\cf2\uldb CPX400_ATTR_RANGE_CHECK}{\v %WinHelp_CPX400_ATTR_RANGE_CHECK}\cf0\par
         Query Instrument Status                  {\cf2\uldb CPX400_ATTR_QUERY_INSTRUMENT_STATUS}{\v %WinHelp_CPX400_ATTR_QUERY_INSTRUMENT_STATUS}\cf0\par
         Cache                                    {\cf2\uldb CPX400_ATTR_CACHE}{\v %WinHelp_CPX400_ATTR_CACHE}\cf0\par
         Simulate                                 {\cf2\uldb CPX400_ATTR_SIMULATE}{\v %WinHelp_CPX400_ATTR_SIMULATE}\cf0\par
         Record Value Coercions                   {\cf2\uldb CPX400_ATTR_RECORD_COERCIONS}{\v %WinHelp_CPX400_ATTR_RECORD_COERCIONS}\cf0\par
         Interchange Check                        {\cf2\uldb CPX400_ATTR_INTERCHANGE_CHECK}{\v %WinHelp_CPX400_ATTR_INTERCHANGE_CHECK}\cf0\par
      Driver Identification\par
         Description                              {\cf2\uldb CPX400_ATTR_SPECIFIC_DRIVER_DESCRIPTION}{\v %WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_DESCRIPTION}\cf0\par
         Driver Prefix                            {\cf2\uldb CPX400_ATTR_SPECIFIC_DRIVER_PREFIX}{\v %WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_PREFIX}\cf0\par
         Driver Vendor                            {\cf2\uldb CPX400_ATTR_SPECIFIC_DRIVER_VENDOR}{\v %WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_VENDOR}\cf0\par
         Revision                                 {\cf2\uldb CPX400_ATTR_SPECIFIC_DRIVER_REVISION}{\v %WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_REVISION}\cf0\par
         Class Specification Major Version        {\cf2\uldb CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION}{\v %WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION}\cf0\par
         Class Specification Minor Version        {\cf2\uldb CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION}{\v %WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION}\cf0\par
      Driver Capabilities\par
         Supported Instrument Models              {\cf2\uldb CPX400_ATTR_SUPPORTED_INSTRUMENT_MODELS}{\v %WinHelp_CPX400_ATTR_SUPPORTED_INSTRUMENT_MODELS}\cf0\par
         Class Group Capabilities                 {\cf2\uldb CPX400_ATTR_GROUP_CAPABILITIES}{\v %WinHelp_CPX400_ATTR_GROUP_CAPABILITIES}\cf0\par
      Instrument Identification\par
         Manufacturer                             {\cf2\uldb CPX400_ATTR_INSTRUMENT_MANUFACTURER}{\v %WinHelp_CPX400_ATTR_INSTRUMENT_MANUFACTURER}\cf0\par
         Model                                    {\cf2\uldb CPX400_ATTR_INSTRUMENT_MODEL}{\v %WinHelp_CPX400_ATTR_INSTRUMENT_MODEL}\cf0\par
         Firmware Revision                        {\cf2\uldb CPX400_ATTR_INSTRUMENT_FIRMWARE_REVISION}{\v %WinHelp_CPX400_ATTR_INSTRUMENT_FIRMWARE_REVISION}\cf0\par
      Advanced Session Information\par
         Logical Name                             {\cf2\uldb CPX400_ATTR_LOGICAL_NAME}{\v %WinHelp_CPX400_ATTR_LOGICAL_NAME}\cf0\par
         Resource Descriptor                      {\cf2\uldb CPX400_ATTR_IO_RESOURCE_DESCRIPTOR}{\v %WinHelp_CPX400_ATTR_IO_RESOURCE_DESCRIPTOR}\cf0\par
         Driver Setup                             {\cf2\uldb CPX400_ATTR_DRIVER_SETUP}{\v %WinHelp_CPX400_ATTR_DRIVER_SETUP}\cf0\par
   Basic Operation\par
      Tracking Mode                               {\cf2\uldb CPX400_ATTR_TRACKING_MODE}{\v %WinHelp_CPX400_ATTR_TRACKING_MODE}\cf0\par
      Verify voltage                              {\cf2\uldb CPX400_ATTR_VERIFY_VOLTAGE}{\v %WinHelp_CPX400_ATTR_VERIFY_VOLTAGE}\cf0\par
      Address                                     {\cf2\uldb CPX400_ATTR_ADDRESS}{\v %WinHelp_CPX400_ATTR_ADDRESS}\cf0\par
      Current step size                           {\cf2\uldb CPX400_ATTR_CURRENT_STEP_SIZE}{\v %WinHelp_CPX400_ATTR_CURRENT_STEP_SIZE}\cf0\par
      Voltage step size                           {\cf2\uldb CPX400_ATTR_VOLTAGE_STEP_SIZE}{\v %WinHelp_CPX400_ATTR_VOLTAGE_STEP_SIZE}\cf0\par
      Output Enabled All                          {\cf2\uldb CPX400_ATTR_OUTPUT_ENABLED_ALL}{\v %WinHelp_CPX400_ATTR_OUTPUT_ENABLED_ALL}\cf0\par
      Output Enabled                              {\cf2\uldb CPX400_ATTR_OUTPUT_ENABLED}{\v %WinHelp_CPX400_ATTR_OUTPUT_ENABLED}\cf0\par
      Interface Lock                              {\cf2\uldb CPX400_ATTR_IFLOCK}{\v %WinHelp_CPX400_ATTR_IFLOCK}\cf0\par
      OVP Enabled                                 {\cf2\uldb CPX400_ATTR_OVP_ENABLED}{\v %WinHelp_CPX400_ATTR_OVP_ENABLED}\cf0\par
      OCP Limit                                   {\cf2\uldb CPX400_ATTR_OCP_LIMIT}{\v %WinHelp_CPX400_ATTR_OCP_LIMIT}\cf0\par
      OVP Limit                                   {\cf2\uldb CPX400_ATTR_OVP_LIMIT}{\v %WinHelp_CPX400_ATTR_OVP_LIMIT}\cf0\par
      Current Limit Behavior                      {\cf2\uldb CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR}{\v %WinHelp_CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR}\cf0\par
      Ratio                                       {\cf2\uldb CPX400_ATTR_RATIO}{\v %WinHelp_CPX400_ATTR_RATIO}\cf0\par
      Current Limit                               {\cf2\uldb CPX400_ATTR_CURRENT_LIMIT}{\v %WinHelp_CPX400_ATTR_CURRENT_LIMIT}\cf0\par
      Range setting                               {\cf2\uldb CPX400_ATTR_RANGE_SETTING}{\v %WinHelp_CPX400_ATTR_RANGE_SETTING}\cf0\par
      Voltage Level                               {\cf2\uldb CPX400_ATTR_VOLTAGE_LEVEL}{\v %WinHelp_CPX400_ATTR_VOLTAGE_LEVEL}\cf0\par
   Status Registers\par
      Limit status register two                   {\cf2\uldb CPX400_ATTR_LIMIT_STATUS_REGISTER_2}{\v %WinHelp_CPX400_ATTR_LIMIT_STATUS_REGISTER_2}\cf0\par
      Limit status register one                   {\cf2\uldb CPX400_ATTR_LIMIT_STATUS_REGISTER_1}{\v %WinHelp_CPX400_ATTR_LIMIT_STATUS_REGISTER_1}\cf0\par
      Standard event status register              {\cf2\uldb CPX400_ATTR_STANDARD_EVENT_STATUS_REGISTER}{\v %WinHelp_CPX400_ATTR_STANDARD_EVENT_STATUS_REGISTER}\cf0\par
      Ist local message                           {\cf2\uldb CPX400_ATTR_IST_LOCAL_MESSAGE}{\v %WinHelp_CPX400_ATTR_IST_LOCAL_MESSAGE}\cf0\par
      Status byte register                        {\cf2\uldb CPX400_ATTR_STATUS_BYTE_REGISTER}{\v %WinHelp_CPX400_ATTR_STATUS_BYTE_REGISTER}\cf0\par
      Limit status enable register two            {\cf2\uldb CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_2}{\v %WinHelp_CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_2}\cf0\par
      Limit status enable register one            {\cf2\uldb CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_1}{\v %WinHelp_CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_1}\cf0\par
      Standard event enable register              {\cf2\uldb CPX400_ATTR_STANDARD_EVENT_ENABLE_REGISTER}{\v %WinHelp_CPX400_ATTR_STANDARD_EVENT_ENABLE_REGISTER}\cf0\par
      Operation complete status                   {\cf2\uldb CPX400_ATTR_OPERATION_COMPLETE_STATUS}{\v %WinHelp_CPX400_ATTR_OPERATION_COMPLETE_STATUS}\cf0\par
      Parallel pole enable register               {\cf2\uldb CPX400_ATTR_PARALLEL_POLE_ENABLE_REGISTER}{\v %WinHelp_CPX400_ATTR_PARALLEL_POLE_ENABLE_REGISTER}\cf0\par
      Service request enable register             {\cf2\uldb CPX400_ATTR_SERVICE_REQUEST_ENABLE_REGISTER}{\v %WinHelp_CPX400_ATTR_SERVICE_REQUEST_ENABLE_REGISTER}\cf0\par
   Miscellaneous Attributes\par
      ID Query Response                           {\cf2\uldb CPX400_ATTR_ID_QUERY_RESPONSE}{\v %WinHelp_CPX400_ATTR_ID_QUERY_RESPONSE}\cf0\par
}\page
#{\footnote WinHelp_CPX400_ATTR_ADDRESS}
${\footnote CPX400_ATTR_ADDRESS}
K{\footnote CPX400_ATTR_ADDRESS}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_ADDRESS
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Returns the bus address of the instrument\par
}\page

#{\footnote WinHelp_CPX400_ATTR_CACHE}
${\footnote CPX400_ATTR_CACHE}
K{\footnote CPX400_ATTR_CACHE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_CACHE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies whether to cache the value of attributes.  When caching is enabled, the instrument driver keeps track of the current instrument settings and avoids sending redundant commands to the instrument.  Thus, you can significantly increase execution speed.\par
    The instrument driver can choose always to cache or never to cache particular attributes regardless of the setting of this attribute.\par
    The default value is VI_TRUE.   Use the CPX400_InitWithOptions function to override this value.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_CURRENT_LIMIT}
${\footnote CPX400_ATTR_CURRENT_LIMIT}
K{\footnote CPX400_ATTR_CURRENT_LIMIT}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_CURRENT_LIMIT
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
This channel-based attribute specifies the output current limit. The units are Amps.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR}
${\footnote CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR}
K{\footnote CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_CURRENT_LIMIT_BEHAVIOR
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
This channel-based attribute specifies the behavior of the power supply when the output current is equal to or greater than the value of the CPX400_ATTR_CURRENT_LIMIT attribute.\par
\par
\pard\plain\f0\fs24\b
Values:\par
\plain\f1\fs18
CPX400_VAL_CURRENT_TRIP                           1\par
When the output current reaches or exceeds the value of the CPX400_ATTR_CURRENT_LIMIT attribute, the power supply disables the output.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_CURRENT_STEP_SIZE}
${\footnote CPX400_ATTR_CURRENT_STEP_SIZE}
K{\footnote CPX400_ATTR_CURRENT_STEP_SIZE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_CURRENT_STEP_SIZE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
set the output current step size to the value specified in Amps\par
}\page

#{\footnote WinHelp_CPX400_ATTR_DRIVER_SETUP}
${\footnote CPX400_ATTR_DRIVER_SETUP}
K{\footnote CPX400_ATTR_DRIVER_SETUP}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_DRIVER_SETUP
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Some cases exist where you must specify instrument driver options at initialization time.  An example of this is specifying a particular instrument model from among a family of instruments that the driver supports.  This is useful when using simulation.  You can specify driver-specific options through the DriverSetup keyword in the optionsString parameter to the CPX400_InitWithOptions function.  If you open an instrument using a logical name, you can also specify the options through the IVI Configuration Utility.\par
    The default value is an empty string.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_GROUP_CAPABILITIES}
${\footnote CPX400_ATTR_GROUP_CAPABILITIES}
K{\footnote CPX400_ATTR_GROUP_CAPABILITIES}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_GROUP_CAPABILITIES
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains a comma-separated list of class-extention groups that this driver implements.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_ID_QUERY_RESPONSE}
${\footnote CPX400_ATTR_ID_QUERY_RESPONSE}
K{\footnote CPX400_ATTR_ID_QUERY_RESPONSE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_ID_QUERY_RESPONSE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Returns the ID Query response string.  The instrument driver gets the value of this attribute when you pass VI_TRUE for the ID Query parameter to the CPX400_init or CPX400_InitWithOptions function.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_IFLOCK}
${\footnote CPX400_ATTR_IFLOCK}
K{\footnote CPX400_ATTR_IFLOCK}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_IFLOCK
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
All interfaces are live at all times; this removes the need to select the active interface and is also a LXI requirement.  To reduce the risk of the instrument being inadvertently under the control of two interfaces at once a simple lock and release mechanism is provided in the instruction set.  The lock is automatically released where it possible to detect disconnection and when the local button is pressed.  Access to the interfaces may also be limited using the web page.\par
\par
To lock the interface set this attributte to TRUE.\par
}\page

#{\footnote WinHelp_CPX400_ATTR_INSTRUMENT_FIRMWARE_REVISION}
${\footnote CPX400_ATTR_INSTRUMENT_FIRMWARE_REVISION}
K{\footnote CPX400_ATTR_INSTRUMENT_FIRMWARE_REVISION}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_INSTRUMENT_FIRMWARE_REVISION
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains the firmware revision information for the instrument you are currently using.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_INSTRUMENT_MANUFACTURER}
${\footnote CPX400_ATTR_INSTRUMENT_MANUFACTURER}
K{\footnote CPX400_ATTR_INSTRUMENT_MANUFACTURER}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_INSTRUMENT_MANUFACTURER
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains the name of the instrument manufacturer you are currently using.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_INSTRUMENT_MODEL}
${\footnote CPX400_ATTR_INSTRUMENT_MODEL}
K{\footnote CPX400_ATTR_INSTRUMENT_MODEL}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_INSTRUMENT_MODEL
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains the model number or name of the instrument that you are currently using.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_INTERCHANGE_CHECK}
${\footnote CPX400_ATTR_INTERCHANGE_CHECK}
K{\footnote CPX400_ATTR_INTERCHANGE_CHECK}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_INTERCHANGE_CHECK
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies whether to perform interchangeability checking and retrieve interchangeability warnings.\par
\par
The default value is VI_FALSE.\par
\par
Interchangeability warnings indicate that using your application with a different instrument might cause different behavior.  You call CPX400 Get Next Interchange Warning to extract interchange warnings.  Call the CPX400_ClearInterchangeWarnings function to clear the list of interchangeability warnings without reading them.\par
Interchangeability checking logs a warning for each attribute you have not set that affects the behavior of the instrument.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_IO_RESOURCE_DESCRIPTOR}
${\footnote CPX400_ATTR_IO_RESOURCE_DESCRIPTOR}
K{\footnote CPX400_ATTR_IO_RESOURCE_DESCRIPTOR}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_IO_RESOURCE_DESCRIPTOR
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Indicates the resource descriptor the driver uses to identify the physical device.\par
    If you initialize the driver with a logical name, this attribute contains the resource descriptor that corresponds to the entry in the IVI Configuration utility.\par
    If you initialize the instrument driver with the resource descriptor, this attribute contains that value.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_IST_LOCAL_MESSAGE}
${\footnote CPX400_ATTR_IST_LOCAL_MESSAGE}
K{\footnote CPX400_ATTR_IST_LOCAL_MESSAGE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_IST_LOCAL_MESSAGE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Returns ist local message as defined by IEEE Std. 488.2.\par
}\page

#{\footnote WinHelp_CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_1}
${\footnote CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_1}
K{\footnote CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_1}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_1
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Two pairs of registers are implemented as an addition to the IEEE Std.488.2. Each pair consists of a Limit Event Status Register  and an accompanying Limit Status Event Enable Register. Limit Event Status Register 1 (LSR1) and Limit Event Status Enable Register 1 (LSE1) apply to output 1. Limit Event Status Register 2 (LSR2) and Limit Event Status Enable Register 2 (LSE2) apply to output 2 and the Auxiliary output. Their purpose is to inform the controller of entry to and/or exit from current or voltage limit conditions by storing a history of protection trip conditions since the last read.\par
Any bits set in  a Limit Event Status Register which correspond to bits set in the accompanying  Limit Event Status Enable Register will cause the LIM1 or LIM2 bit to be set in the Status Byte Register.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_2}
${\footnote CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_2}
K{\footnote CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_2}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_LIMIT_STATUS_ENABLE_REGISTER_2
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Two pairs of registers are implemented as an addition to the IEEE Std.488.2. Each pair consists of a Limit Event Status Register  and an accompanying Limit Status Event Enable Register. Limit Event Status Register 1 (LSR1) and Limit Event Status Enable Register 1 (LSE1) apply to output 1. Limit Event Status Register 2 (LSR2) and Limit Event Status Enable Register 2 (LSE2) apply to output 2 and the Auxiliary output. Their purpose is to inform the controller of entry to and/or exit from current or voltage limit conditions by storing a history of protection trip conditions since the last read.\par
Any bits set in  a Limit Event Status Register which correspond to bits set in the accompanying  Limit Event Status Enable Register will cause the LIM1 or LIM2 bit to be set in the Status Byte Register.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_LIMIT_STATUS_REGISTER_1}
${\footnote CPX400_ATTR_LIMIT_STATUS_REGISTER_1}
K{\footnote CPX400_ATTR_LIMIT_STATUS_REGISTER_1}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_LIMIT_STATUS_REGISTER_1
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Two pairs of registers are implemented as an addition to the IEEE Std.488.2. Each pair consists of a Limit Event Status Register  and an accompanying Limit Status Event Enable Register. Limit Event Status Register 1 (LSR1) and Limit Event Status Enable Register 1 (LSE1) apply to output 1. Limit Event Status Register 2 (LSR2) and Limit Event Status Enable Register 2 (LSE2) apply to output 2 and the Auxiliary output. Their purpose is to inform the controller of entry to and/or exit from current or voltage limit conditions by storing a history of protection trip conditions since the last read.\par
Any bits set in  a Limit Event Status Register which correspond to bits set in the accompanying  Limit Event Status Enable Register will cause the LIM1 or LIM2 bit to be set in the Status Byte Register.\par
Limit Event Status Register 1\par
Bit 7 -     Not used\par
Bit 6 -     Set when a trip has occurred that can only be reset from the front panel or by removing and reapplying the AC power\par
Bit 5 -     Set when an output 1 sense trip has occurred\par
Bit 4 -     Set when an output 1 enters power limit\par
Bit 3 -     Set when an output 1 over current trip has occurred\par
Bit 2 -     Set when an output 1 over voltage trip has occurred\par
Bit 1 -     Set when output 1 enters current limit (constant current mode)\par
Bit 0 -     Set when output 1 enters voltage limit (constant voltage mode)\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_LIMIT_STATUS_REGISTER_2}
${\footnote CPX400_ATTR_LIMIT_STATUS_REGISTER_2}
K{\footnote CPX400_ATTR_LIMIT_STATUS_REGISTER_2}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_LIMIT_STATUS_REGISTER_2
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Two pairs of registers are implemented as an addition to the IEEE Std.488.2. Each pair consists of a Limit Event Status Register  and an accompanying Limit Status Event Enable Register. Limit Event Status Register 1 (LSR1) and Limit Event Status Enable Register 1 (LSE1) apply to output 1. Limit Event Status Register 2 (LSR2) and Limit Event Status Enable Register 2 (LSE2) apply to output 2 and the Auxiliary output. Their purpose is to inform the controller of entry to and/or exit from current or voltage limit conditions by storing a history of protection trip conditions since the last read.\par
Any bits set in  a Limit Event Status Register which correspond to bits set in the accompanying  Limit Event Status Enable Register will cause the LIM1 or LIM2 bit to be set in the Status Byte Register.\par
\par
Limit Event Status Register 2\par
Bit 7 -     Not used\par
Bit 6 -     Set when a trip has occurred that can only be reset from the front panel or by removing and reapplying the AC power\par
Bit 5 -     Set when an output 2 sense trip has occurred\par
Bit 4 -     Set when an output 2 enters power limit\par
Bit 3 -     Set when an output 2 over current trip has occurred\par
Bit 2 -     Set when an output 2 over voltage trip has occurred\par
Bit 1 -     Set when output 2 enters current limit (constant current mode)\par
Bit 0 -     Set when output 2 enters voltage limit (constant voltage mode)\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_LOGICAL_NAME}
${\footnote CPX400_ATTR_LOGICAL_NAME}
K{\footnote CPX400_ATTR_LOGICAL_NAME}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_LOGICAL_NAME
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string containing the logical name you specified when opening the current IVI session.\par
     You may pass a logical name to the CPX400_init or CPX400_InitWithOptions functions.  The IVI Configuration utility must contain an entry for the logical name.  The logical name entry refers to a virtual instrument section in the IVI Configuration file.  The virtual instrument section specifies a physical device and initial user options.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_OCP_LIMIT}
${\footnote CPX400_ATTR_OCP_LIMIT}
K{\footnote CPX400_ATTR_OCP_LIMIT}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_OCP_LIMIT
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Refer to the instruction manual for your model's Over-Current Protection (OCP) settings.  If the output current exceeds the set OCP the output is shut down (typically within 35ms). The factory default setting is model dependent.\par
If the OCP is tripped the display shows the message   OCP triP   and the output is turned off. Pressing ESCAPE at this point removes the message and the display now shows the preset voltage and current limit. When the cause of the OCP has been removed (or the OCP limit changed) the output can be turned on again.\par
Note that as with OVP, the OCP setting is not changed when the range is changed.\par
Note also that is possible and valid to set OCP below the set current limit.  For example, the power supply may be used to repetitively test a unit under test (UUT) which normally takes a peak current of, say, 2 Amps.  However, a faulty UUT would take a current of more than 2 Amps and would be damaged by being left in a 2 Amp current-limited state.  In this case the current limit could be set to 2\'B71A, say, and the OCP set to 2\'B70A to ensure that a faulty UUT will trip the supply off.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_OPERATION_COMPLETE_STATUS}
${\footnote CPX400_ATTR_OPERATION_COMPLETE_STATUS}
K{\footnote CPX400_ATTR_OPERATION_COMPLETE_STATUS}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_OPERATION_COMPLETE_STATUS
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Sets and reads the Operation Complete bit (bit 0) in the Standard Event Status Register.\par
}\page

#{\footnote WinHelp_CPX400_ATTR_OUTPUT_ENABLED}
${\footnote CPX400_ATTR_OUTPUT_ENABLED}
K{\footnote CPX400_ATTR_OUTPUT_ENABLED}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_OUTPUT_ENABLED
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
This channel-based attribute specifies whether the signal the power supply produces appears at the output connector.\par
\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_OUTPUT_ENABLED_ALL}
${\footnote CPX400_ATTR_OUTPUT_ENABLED_ALL}
K{\footnote CPX400_ATTR_OUTPUT_ENABLED_ALL}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_OUTPUT_ENABLED_ALL
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
This attribute specifies whether the signal the power supply produces appears at the ALL the output connectors.\par
\par
\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_OVP_ENABLED}
${\footnote CPX400_ATTR_OVP_ENABLED}
K{\footnote CPX400_ATTR_OVP_ENABLED}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_OVP_ENABLED
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
The CPX400 must always set this to VI_TRUE.\par
}\page

#{\footnote WinHelp_CPX400_ATTR_OVP_LIMIT}
${\footnote CPX400_ATTR_OVP_LIMIT}
K{\footnote CPX400_ATTR_OVP_LIMIT}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_OVP_LIMIT
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
If the output voltage exceeds the set OVP the output is immediately shut down (typically within 100\'B5s), thus avoiding damage to the circuit under test.  The OVP circuit will protect against accidental excessive voltage settings from the front panel or via the remote control interfaces, external voltages impressed across the output terminals, or a failure in the control circuitry of the instrument itself. The factory default setting is 66.0V.\par
\par
If the OVP is tripped the display shows the message   OUP triP  and the output is turned off.  Pressing ESCAPE at this point removes the message and the display now shows the preset voltage and current limit.  When the cause of the OVP has been removed (or the OVP limit changed) the output can be turned on again.\par
\par
Note that the OVP setting is not changed when the range is changed (e.g. an OVP setting of 38V remains valid on the 15V range); it is left to the user to independently change the OVP setting if required.\par
\par
Note also that it is possible and valid to set OVP below the set voltage.  If the supply is in constant current mode the output voltage will be below the set voltage; OVP could be set such that is was above the actual output voltage but below the set voltage.  This could be used to trip the output under a fault condition which caused the load impedance to increase and the actual output voltage to therefore rise above the OVP point.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_PARALLEL_POLE_ENABLE_REGISTER}
${\footnote CPX400_ATTR_PARALLEL_POLE_ENABLE_REGISTER}
K{\footnote CPX400_ATTR_PARALLEL_POLE_ENABLE_REGISTER}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_PARALLEL_POLE_ENABLE_REGISTER
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Complete parallel poll capabilities are offered on this instrument. The Parallel Poll Enable Register is set to specify which bits in the Status Byte Register are to be used to form the ist local message. The value in the Parallel Poll Enable Register is ANDed with the Status Byte Register; if the result is zero then the value of ist is 0 otherwise the value of ist is 1.\par
The instrument must also be configured so that the value of ist can be returned to the controller during a parallel poll operation. The instrument is configured by the controller sending a Parallel Poll Configure command (PPC) followed by a Parallel Poll Enable command (PPE). The bits in the PPE command are shown below:\par
\par
bit 7 = X      don't care\par
bit 6 = 1\par
bit 5 = 1      Parallel poll enable\par
bit 4 = 0\par
bit 3 = Sense  sense of the response bit; 0 = low, 1 = high\par
bit 2 = ?\par
bit 1 = ?      bit position of the response\par
bit 0 = ?\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_QUERY_INSTRUMENT_STATUS}
${\footnote CPX400_ATTR_QUERY_INSTRUMENT_STATUS}
K{\footnote CPX400_ATTR_QUERY_INSTRUMENT_STATUS}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_QUERY_INSTRUMENT_STATUS
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies whether the instrument driver queries the instrument status after each operation.  Querying the instrument status is very useful for debugging.  After you validate your program, you can set this attribute to VI_FALSE to disable status checking and maximize performance\par
    The instrument driver can choose to ignore status checking for particular attributes regardless of the setting of this attribute.\par
    The default value is VI_TRUE.   Use the CPX400_InitWithOptions function to override this value.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_RANGE_CHECK}
${\footnote CPX400_ATTR_RANGE_CHECK}
K{\footnote CPX400_ATTR_RANGE_CHECK}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_RANGE_CHECK
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies whether to validate attribute values and function parameters.  If enabled, the instrument driver validates the parameter values that you pass to driver functions.  Range checking parameters is very useful for debugging.  After you validate your program, you can set this attribute to VI_FALSE to disable range checking and maximize performance.\par
    The default value is VI_TRUE.   Use the CPX400_InitWithOptions function to override this value.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_RANGE_SETTING}
${\footnote CPX400_ATTR_RANGE_SETTING}
K{\footnote CPX400_ATTR_RANGE_SETTING}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_RANGE_SETTING
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies the range the instrument operates on.\par
\par
The CPX400 has a fixed 60V/20A range.\par
\par
\par
\par
.\par
\par
\pard\plain\f0\fs24\b
Values:\par
\plain\f1\fs18
1                                                 1\par
Range 1, Model specific, see instrument user manual\par
\par
2                                                 2\par
Range 2, Model specific, see instrument user manual\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_RATIO}
${\footnote CPX400_ATTR_RATIO}
K{\footnote CPX400_ATTR_RATIO}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_RATIO
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Sets the ratio of output 2 to output 1 in tracking mode to the percent (0 to 100).\par
}\page

#{\footnote WinHelp_CPX400_ATTR_RECORD_COERCIONS}
${\footnote CPX400_ATTR_RECORD_COERCIONS}
K{\footnote CPX400_ATTR_RECORD_COERCIONS}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_RECORD_COERCIONS
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies whether the IVI engine keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  You call CPX400_GetNextCoercionRecord to extract and delete the oldest coercion record from the list.\par
    The default value is VI_FALSE.   Use the CPX400_InitWithOptions function to override this value.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SERVICE_REQUEST_ENABLE_REGISTER}
${\footnote CPX400_ATTR_SERVICE_REQUEST_ENABLE_REGISTER}
K{\footnote CPX400_ATTR_SERVICE_REQUEST_ENABLE_REGISTER}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SERVICE_REQUEST_ENABLE_REGISTER
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Any bits set in the Status Byte Register which correspond to bits set in the Service Request Enable Register will cause the RQS/MSS bit to be set in the Status Byte Register, thus generating a Service Request on the bus.\par
\par
Bit 7 -     Not used.\par
Bit 6 -     RQS/MSS. This bit, as defined by IEEE Std. 488.2, contains both the Requesting Service message and the Master Status Summary message. RQS is returned in response to a Serial Poll and MSS is returned in response to the *STB? command.\par
Bit 5 -     ESB. The Event Status Bit. This bit is set if any bits set in the Standard Event Status Register correspond to bits set in the Standard Event Status Enable Register.\par
Bit 4 -     MAV. The Message Available Bit. This will be set when the instrument has a response message formatted and ready to send to the controller. The bit will be cleared after the Response Message Terminator has been sent.\par
Bit 3 -     Not used.\par
Bit 2 -     Not used.\par
Bit 1 -     LIM2.  This will be set if any bits in Limit Event Status Register 2 are set and corresponding bits are set in Limit Event Status Enable Register 2.\par
Bit 0 -     LIM1.  This will be set if any bits in Limit Event Status Register 1 are set and corresponding bits are set in Limit Event Status Enable Register 1.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SIMULATE}
${\footnote CPX400_ATTR_SIMULATE}
K{\footnote CPX400_ATTR_SIMULATE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SIMULATE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Specifies whether or not to simulate instrument driver I/O operations.  If simulation is enabled, instrument driver functions perform range checking and call Ivi_GetAttribute and Ivi_SetAttribute functions, but they do not perform instrument I/O.  For output parameters that represent instrument data, the instrument driver functions return calculated values.\par
    The default value is VI_FALSE.   Use the CPX400_InitWithOptions function to override this value.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION}
${\footnote CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION}
K{\footnote CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
The major version number of the class specification with which this driver is compliant.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION}
${\footnote CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION}
K{\footnote CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
The minor version number of the class specification with which this driver is compliant.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_DESCRIPTION}
${\footnote CPX400_ATTR_SPECIFIC_DRIVER_DESCRIPTION}
K{\footnote CPX400_ATTR_SPECIFIC_DRIVER_DESCRIPTION}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SPECIFIC_DRIVER_DESCRIPTION
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains a brief description of the specific driver\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_PREFIX}
${\footnote CPX400_ATTR_SPECIFIC_DRIVER_PREFIX}
K{\footnote CPX400_ATTR_SPECIFIC_DRIVER_PREFIX}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SPECIFIC_DRIVER_PREFIX
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains the prefix for the instrument driver.  The name of each user-callable function in this driver starts with this prefix.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_REVISION}
${\footnote CPX400_ATTR_SPECIFIC_DRIVER_REVISION}
K{\footnote CPX400_ATTR_SPECIFIC_DRIVER_REVISION}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SPECIFIC_DRIVER_REVISION
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains additional version information about this instrument driver.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SPECIFIC_DRIVER_VENDOR}
${\footnote CPX400_ATTR_SPECIFIC_DRIVER_VENDOR}
K{\footnote CPX400_ATTR_SPECIFIC_DRIVER_VENDOR}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SPECIFIC_DRIVER_VENDOR
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
A string that contains the name of the vendor that supplies this driver.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_STANDARD_EVENT_ENABLE_REGISTER}
${\footnote CPX400_ATTR_STANDARD_EVENT_ENABLE_REGISTER}
K{\footnote CPX400_ATTR_STANDARD_EVENT_ENABLE_REGISTER}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_STANDARD_EVENT_ENABLE_REGISTER
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Standard Event Status and Standard Event Status Enable Registers are implemented as required by the IEEE Std. 488.2.\par
Any bits set in the Standard Event Status Register which correspond to bits set in the Standard Event Status Enable Register will cause the ESB bit to be set in the Status Byte Register.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_STANDARD_EVENT_STATUS_REGISTER}
${\footnote CPX400_ATTR_STANDARD_EVENT_STATUS_REGISTER}
K{\footnote CPX400_ATTR_STANDARD_EVENT_STATUS_REGISTER}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_STANDARD_EVENT_STATUS_REGISTER
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Standard Event Status and Standard Event Status Enable Registers are implemented as required by the IEEE Std. 488.2.\par
Any bits set in the Standard Event Status Register which correspond to bits set in the Standard Event Status Enable Register will cause the ESB bit to be set in the Status Byte Register.\par
\par
Bit 7 -     Power On. Set when power is first applied to the instrument.\par
Bit 6 -     Not used.\par
Bit 5 -     Command Error. Set when a syntax type error is detected in a command from the bus. The parser is reset and parsing continues at the next byte in the input stream.\par
Bit 4 -     Execution Error. Set when an error is encountered while attempting to execute a completely parsed command. The appropriate error number will be reported in the Execution Error Register.\par
   0    No error encountered\par
1 - 9   Internal hardware error detected.\par
100     Range error.  The numeric value sent is not allowed.  This includes numbers that are too big or small for the parameter being set and non-integers being sent where only integers are allowed.\par
101     A recall of set up data has been requested but the store specified contains corrupted data.  This indicates either a hardware fault or a temporary data corruption, which can be corrected by writing data to the store again.\par
102     A recall of set up data has been requested but the store specified does not contain any data.\par
103     Attempt to read or write a command on the second output when it is not available.  Typically this will occur if attempting to program the second output on a single channel instruments or a two-channel instrument when parallel mode is selected.\par
104     Command not valid with output on. This is typically caused by using the \'91CONFIG<n>\'92 command without first turning the output off.\par
200 Read Only: An attempt has been made to change the settings of the unit from an instrument without write privileges. See 'Interface locking' below for detail.\par
Bit 3 - Verify Timeout Error.  Set when a parameter is set with 'verify' specified and the value is not reached within 5 secs, e.g. output voltage is slowed by a large capacitor on the output.\par
Bit 2 -     Query Error. Set when a query error occurs. The appropriate error number will be reported in the Query Error Register as listed below.\par
    1.   Interrupted error\par
    2.   Deadlock error\par
    3.   Unterminated error\par
Bit 1 -     Not used.\par
Bit 0 -     Operation Complete. Set in response to the *OPC command.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_STATUS_BYTE_REGISTER}
${\footnote CPX400_ATTR_STATUS_BYTE_REGISTER}
K{\footnote CPX400_ATTR_STATUS_BYTE_REGISTER}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_STATUS_BYTE_REGISTER
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Any bits set in the Status Byte Register which correspond to bits set in the Service Request Enable Register will cause the RQS/MSS bit to be set in the Status Byte Register, thus generating a Service Request on the bus.\par
\par
Bit 7 -     Not used.\par
Bit 6 -     RQS/MSS. This bit, as defined by IEEE Std. 488.2, contains both the Requesting Service message and the Master Status Summary message. RQS is returned in response to a Serial Poll and MSS is returned in response to the *STB? command.\par
Bit 5 -     ESB. The Event Status Bit. This bit is set if any bits set in the Standard Event Status Register correspond to bits set in the Standard Event Status Enable Register.\par
Bit 4 -     MAV. The Message Available Bit. This will be set when the instrument has a response message formatted and ready to send to the controller. The bit will be cleared after the Response Message Terminator has been sent.\par
Bit 3 -     Not used.\par
Bit 2 -     Not used.\par
Bit 1 -     LIM2.  This will be set if any bits in Limit Event Status Register 2 are set and corresponding bits are set in Limit Event Status Enable Register 2.\par
Bit 0 -     LIM1.  This will be set if any bits in Limit Event Status Register 1 are set and corresponding bits are set in Limit Event Status Enable Register 1.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_SUPPORTED_INSTRUMENT_MODELS}
${\footnote CPX400_ATTR_SUPPORTED_INSTRUMENT_MODELS}
K{\footnote CPX400_ATTR_SUPPORTED_INSTRUMENT_MODELS}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_SUPPORTED_INSTRUMENT_MODELS
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViString\par
\par
\plain\f0\fs24\b
Restrictions:
\plain\f1\fs18
  Not settable.
\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
Contains a model code of the instrument. For drivers that support more than one device, this attribute contains a comma-separated list of supported instrument models.\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_TRACKING_MODE}
${\footnote CPX400_ATTR_TRACKING_MODE}
K{\footnote CPX400_ATTR_TRACKING_MODE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_TRACKING_MODE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViInt32\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
The value is 2 for dual units with both channels operating independently and is 0 for \'91tracking mode\'92.\par
\pard\plain\f0\fs24\b
Values:\par
\plain\f1\fs18
0                                                 0\par
CPX400DP is in tracking mode\par
\par
2                                                 2\par
Both channels operating independently\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_VERIFY_VOLTAGE}
${\footnote CPX400_ATTR_VERIFY_VOLTAGE}
K{\footnote CPX400_ATTR_VERIFY_VOLTAGE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_VERIFY_VOLTAGE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViBoolean\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
When set to VI_TRUE the Operation Complete message is generated when the parameter being adjusted reaches the required value to within +/-5% or +/-10 counts, whichever is the greater. If the value fails to settle to within these limits within 5 seconds then the Verify Timeout bit (bit 3) is set in the Standard Event Status register and the Operation Complete message will not be generated\par
}\page

#{\footnote WinHelp_CPX400_ATTR_VOLTAGE_LEVEL}
${\footnote CPX400_ATTR_VOLTAGE_LEVEL}
K{\footnote CPX400_ATTR_VOLTAGE_LEVEL}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_VOLTAGE_LEVEL
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
This channel-based attribute specifies the voltage level the DC power supply attempts to generate.  The units are Volts.\par
\par
\par
\par
}\page

#{\footnote WinHelp_CPX400_ATTR_VOLTAGE_STEP_SIZE}
${\footnote CPX400_ATTR_VOLTAGE_STEP_SIZE}
K{\footnote CPX400_ATTR_VOLTAGE_STEP_SIZE}
\pard\keepn\plain\f0\fs6\cf0\b
\par \plain\f0\fs28\cf1\b CPX400_ATTR_VOLTAGE_STEP_SIZE
\par \plain\f0\fs6\cf0\b
\par
\pard\plain\f1\fs18{
\par
\pard\plain\f0\fs24\b
Data Type:
     
\plain\f1\fs18 
ViReal64\par
\par
\pard\plain\f0\fs24\b
Description:
   
\plain\f1\fs18 
\par
set the output voltage step size to the value supplied in Volts\par
}\page

}